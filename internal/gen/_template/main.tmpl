{{- /*gotype: github.com/gotd/td/internal/gen.config*/ -}}

{{ define "main" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{ range $s:= $.Structs }}
// {{ $s.Comment }}
{{- if $s.Docs }}
{{- range $d:= $s.Docs }}
// {{ trim $d }}
{{- end }}
{{- end }}
{{- if $s.Links }}
    {{- template "print_links" $s.Links }}
{{- end }}
{{- if $s.URL }}
//
// See {{ $s.URL }} for reference.
{{- end }}
type {{ $s.Name }} struct {
{{- range $f := $s.Fields }}
// {{ $f.Comment }}
{{- if $f.Links}}
    {{- template "print_links" $f.Links }}
{{- end }}
{{- if and ($f.Conditional) (not $f.ConditionalBool) }}
//
// Use Set{{ $f.Name }} and Get{{ $f.Name }} helpers.
{{- end }}
    {{ $f.Name }} {{ template "print_type" $f }}
{{- end }}
}

// {{ $s.Name }}TypeID is TL type id of {{ $s.Name }}.
const {{ $s.Name }}TypeID = {{ if not $s.Vector }}0x{{ $s.HexID }}{{- else -}}bin.TypeVector{{- end }};

{{ template "generate_helpers" $s }}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*{{ $s.Name }}) TypeID() uint32 {
    return {{ $s.Name }}TypeID
}

// TypeName returns name of type in TL schema.
func (*{{ $s.Name }}) TypeName() string {
    return "{{ $s.RawName }}"
}

// TypeInfo returns info about TL type.
func ({{ $s.Receiver }} *{{ $s.Name }}) TypeInfo() tdp.Type {
    typ := tdp.Type{
        Name: "{{ $s.RawName }}",
        ID:   {{ $s.Name }}TypeID,
    }
    if {{ $s.Receiver }} == nil {
        typ.Null = true
        return typ
    }
    typ.Fields = []tdp.Field{
{{- range $f := $s.Fields }}
{{- if ne ($f.Type) ("bin.Fields") }}
        {
            Name: "{{ $f.Name }}",
            SchemaName: "{{ $f.RawName }}",
        {{- if $f.Conditional }}
            Null: !{{ $s.Receiver }}.{{ $f.ConditionalField }}.Has({{ $f.ConditionalIndex }}),
        {{- end }}
        },
{{- end }}
{{- end }}
    }
    return typ
}

// Encode implements bin.Encoder.
func ({{ $s.Receiver }} *{{ $s.Name }}) Encode({{ $s.BufArg }} *bin.Buffer) error {
    if {{ $s.Receiver }} == nil {
        return fmt.Errorf("can't encode {{ $s.RawType }} as nil")
    }
{{ if not $s.Vector -}}
    {{ $s.BufArg }}.PutID({{ $s.Name }}TypeID)
{{- end }}
    return {{ $s.Receiver }}.EncodeBare({{ $s.BufArg }})
}

// EncodeBare implements bin.BareEncoder.
func ({{ $s.Receiver }} *{{ $s.Name }}) EncodeBare({{ $s.BufArg }} *bin.Buffer) error {
    if {{ $s.Receiver }} == nil {
        return fmt.Errorf("can't encode {{ $s.RawType }} as nil")
    }
{{- range $f := $s.Fields }}
    {{- if $f.Conditional }}
    if !({{ $s.Receiver }}.{{template "compare_zero" $f}}) {
        {{ $s.Receiver }}.{{ $f.ConditionalField }}.Set({{ $f.ConditionalIndex }})
    }
    {{- end }}
{{- end }}
{{- range $f := $s.Fields }}
    {{- if not $f.ConditionalBool }}
    {{- if $f.Conditional }}
    if {{ $s.Receiver }}.{{ $f.ConditionalField }}.Has({{ $f.ConditionalIndex }}) {
    {{- end }}
    {{- if $f.Vector }}
    {{ if not $f.BareVector }}{{ $s.BufArg }}.PutVectorHeader(len({{ $s.Receiver }}.{{ $f.Name }})){{ else }}{{ $s.BufArg }}.PutInt(len({{ $s.Receiver }}.{{ $f.Name }})){{- end }}
    for {{ if $f.Encoder }}idx{{ else }}_{{ end }}, {{- if $f.DoubleVector }}row{{else}}v{{end}} := range {{ $s.Receiver }}.{{ $f.Name }} {
    {{- if $f.DoubleVector }}
        {{ $s.BufArg }}.PutVectorHeader(len(row))
        for _, v := range row {
    {{- end }}
    {{- if $f.Encoder }}
        {{- if $f.Interface }}
            if v == nil {
            return fmt.Errorf("unable to encode {{ $s.RawType }}: field {{ $f.RawName }} element with index %d is nil", idx)
            }
        {{- end}}
        if err := v.Encode{{ if $f.BareVector }}Bare{{ end }}({{ $s.BufArg }}); err != nil {
            return fmt.Errorf("unable to encode{{ if $f.BareVector }} bare{{ end }} {{ $s.RawType }}: field {{ $f.RawName }} element with index %d: %w", idx, err)
        }
    {{- else }}
        {{ $s.BufArg }}.Put{{ $f.Func }}(v)
    {{- end }}
    {{- if $f.DoubleVector }}
        }
    {{- end }}
    }
    {{- else }}
    {{- if $f.Encoder }}
    {{- if $f.Interface }}
    if {{ $s.Receiver }}.{{ $f.Name }} == nil {
        return fmt.Errorf("unable to encode {{ $s.RawType }}: field {{ $f.RawName }} is nil")
    }
    {{- end}}
    if err := {{ $s.Receiver }}.{{ $f.Name }}.Encode({{ $s.BufArg }}); err != nil {
        return fmt.Errorf("unable to encode {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
    }
    {{- else }}
    {{ $s.BufArg }}.Put{{ $f.Func }}({{ $s.Receiver }}.{{ $f.Name }})
    {{- end }}
    {{- end }}
    {{- if $f.Conditional }}
    }
    {{- end }}
    {{- end }}
{{- end }}
    return nil
}

{{- range $f := $s.Fields }}{{ if ne ($f.Type) ("bin.Fields") }}
{{ if $f.Conditional }}
// Set{{ $f.Name }} sets value of {{ $f.Name }} conditional field.
func ({{ $s.Receiver }} *{{ $s.Name }}) Set{{ $f.Name }}(value {{ template "print_type" $f }}) {
{{- if $f.ConditionalBool }}
    if value {
        {{ $s.Receiver }}.{{ $f.ConditionalField }}.Set({{ $f.ConditionalIndex }})
        {{ $s.Receiver }}.{{ $f.Name }} = true
    } else {
        {{ $s.Receiver }}.{{ $f.ConditionalField }}.Unset({{ $f.ConditionalIndex }})
        {{ $s.Receiver }}.{{ $f.Name }} = false
    }
{{- else }}
    {{ $s.Receiver }}.{{ $f.ConditionalField }}.Set({{ $f.ConditionalIndex }})
    {{ $s.Receiver }}.{{ $f.Name }} = value
{{- end }}
}
{{- end }}

// Get{{ $f.Name }} returns value of {{ $f.Name }} {{ if $f.Conditional }}
{{- if not ($f.ConditionalBool) }}conditional field and
// boolean which is true if field was set.
{{- else }}conditional field.
{{- end }}
{{- else }}field.
{{- end }}
func ({{ $s.Receiver }} *{{ $s.Name }}) {{ template "getter_func_type" $f }} {
    {{- if $f.Conditional }}{{ if not ($f.ConditionalBool) }}
    if !{{ $s.Receiver }}.{{ $f.ConditionalField }}.Has({{ $f.ConditionalIndex }}) {
        return value, false
    }
    return {{ $s.Receiver }}.{{ $f.Name }}, true
    {{- else }}
    return {{ $s.Receiver }}.{{ $f.ConditionalField }}.Has({{ $f.ConditionalIndex }})
    {{- end }}
    {{- else }}
    return {{ $s.Receiver }}.{{ $f.Name }}
    {{- end }}
}

{{- if not $f.DoubleSlice }}

{{ if not $f.Slice }}
{{- $mappings := index ($.Mappings) ($f.Type) -}}

{{- range $mapping := $mappings }}{{- if (not $mapping.Constructor) }}
{{- /*gotype: github.com/gotd/td/internal/gen.constructorMapping*/ -}}
// Get{{ $f.Name }}As{{ $mapping.MapperName }} returns mapped value of {{ $f.Name }} {{ if $f.Conditional }}
{{- if not ($f.ConditionalBool) }}conditional field and
// boolean which is true if field was set.
{{- else }}conditional field.
{{- end }}
{{- else }}field.
{{- end }}
func ({{ $s.Receiver }} *{{ $s.Name }}) Get{{ $f.Name }}As{{ $mapping.MapperName }}() ({{ template "print_mapper_type" $mapping }}, bool) {
    {{- if $f.Conditional }}
    if value, ok := {{ $s.Receiver }}.Get{{ $f.Name }}(); ok {
        return value.As{{ $mapping.MapperName }}()
    }
    return nil, false
    {{- else }}
    return {{ $s.Receiver }}.{{ $f.Name }}.As{{ $mapping.MapperName }}()
    {{- end }}
}
{{- end }}{{- end }}
{{- else }}{{- if $f.Interface }}
// Map{{ $f.Name }} returns field {{ $f.Name }} wrapped in {{ template "slice_field_name" $f }} helper.
func ({{ $s.Receiver }} *{{ $s.Name }}) Map{{ $f.Name }}() (value {{ template "slice_field_name" $f }}{{ if $f.Conditional }}, ok bool{{ end }}) {
    {{- if $f.Conditional }}
    if !{{ $s.Receiver }}.{{ $f.ConditionalField }}.Has({{ $f.ConditionalIndex }}) {
        return value, false
    }
    return {{ template "slice_field_name" $f }}({{ $s.Receiver }}.{{ $f.Name }}), true
    {{- else }}
    return {{ template "slice_field_name" $f }}({{ $s.Receiver }}.{{ $f.Name }})
    {{- end }}
}
{{- end }}{{- end }}

{{- end }}

{{- end }}{{- end }}

// Decode implements bin.Decoder.
func ({{ $s.Receiver }} *{{ $s.Name }}) Decode({{ $s.BufArg }} *bin.Buffer) error {
    if {{ $s.Receiver }} == nil {
        return fmt.Errorf("can't decode {{ $s.RawType }} to nil")
    }
{{ if not $s.Vector -}}
    if err := {{ $s.BufArg }}.ConsumeID({{ $s.Name }}TypeID); err != nil {
        return fmt.Errorf("unable to decode {{ $s.RawType }}: %w", err)
    }
{{- end }}
    return {{ $s.Receiver }}.DecodeBare({{ $s.BufArg }})
}

// DecodeBare implements bin.BareDecoder.
func ({{ $s.Receiver }} *{{ $s.Name }}) DecodeBare({{ $s.BufArg }} *bin.Buffer) error {
    if {{ $s.Receiver }} == nil {
        return fmt.Errorf("can't decode {{ $s.RawType }} to nil")
    }
{{- range $f := $s.Fields }}
    {{- if $f.ConditionalBool }}
        {{ $s.Receiver }}.{{ $f.Name }} = {{ $s.Receiver }}.{{ $f.ConditionalField }}.Has({{ $f.ConditionalIndex }})
    {{- else }}
        {{- if $f.Conditional}}
            if {{ $s.Receiver }}.{{ $f.ConditionalField }}.Has({{ $f.ConditionalIndex }}) {
        {{- else}}
            {
        {{- end }}
        {{- if $f.Vector }}
            headerLen, err := {{ if $f.BareVector }}{{ $s.BufArg }}.Int(){{ else }}{{ $s.BufArg }}.VectorHeader(){{ end }}
            if err != nil {
                return fmt.Errorf("unable to decode {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
            }
            for idx := 0; idx < headerLen; idx++ {

            {{- if $f.DoubleVector }}
                innerLen, err := {{ $s.BufArg }}.VectorHeader()
                if err != nil {
                    return fmt.Errorf("unable to decode {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
                }
                var row []{{ $f.Type }}
                for innerIndex := 0; innerIndex < innerLen; innerLen++ {
            {{- end }}
            {{- if $f.Interface }}
                value, err := Decode{{ $f.InterfaceFunc }}({{ $s.BufArg }})
                if err != nil {
                    return fmt.Errorf("unable to decode {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
                }
            {{- else if $f.Encoder }}
                var value {{ $f.Type }}
                if err := value.Decode{{ if $f.BareVector }}Bare{{ end }}({{ $s.BufArg }}); err != nil {
                    return fmt.Errorf("unable to decode{{ if $f.BareVector }} bare{{ end }} {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
                }
            {{- else}}
                value, err := {{ $s.BufArg }}.{{ $f.Func }}()
                if err != nil {
                    return fmt.Errorf("unable to decode {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
                }
            {{- end }}
                {{- if $f.DoubleVector }}
                    row = append(row, value)
                }
                {{ $s.Receiver }}.{{ $f.Name }} = append({{ $s.Receiver }}.{{ $f.Name }}, row)
                {{- else }}
                {{ $s.Receiver }}.{{ $f.Name }} = append({{ $s.Receiver }}.{{ $f.Name }}, value)
                {{- end }}
            }
        {{- else }}
        {{- if $f.Interface }}
            value, err := Decode{{ $f.InterfaceFunc }}({{ $s.BufArg }})
            if err != nil {
                return fmt.Errorf("unable to decode {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
            }
            {{ $s.Receiver }}.{{ $f.Name }} = value
        {{- else if $f.Encoder }}
            if err := {{ $s.Receiver }}.{{ $f.Name }}.Decode({{ $s.BufArg }}); err != nil {
                return fmt.Errorf("unable to decode {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
            }
        {{- else }}
            value, err := {{ $s.BufArg }}.{{ $f.Func }}()
            if err != nil {
                return fmt.Errorf("unable to decode {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
            }
            {{ $s.Receiver }}.{{ $f.Name }} = value
        {{- end }}
        {{- end }}
    }
    {{- end }}
{{- end }}
    return nil
}

{{ if $s.Interface }}
// construct implements constructor of {{ $s.Interface }}.
func ({{ $s.Receiver }} {{ $s.Name }}) construct() {{ $s.Interface }} { return &{{ $s.Receiver }} }
{{ end }}

// Ensuring interfaces in compile-time for {{ $s.Name }}.
var (
_ bin.Encoder = &{{ $s.Name }}{}
_ bin.Decoder = &{{ $s.Name }}{}
_ bin.BareEncoder = &{{ $s.Name }}{}
_ bin.BareDecoder = &{{ $s.Name }}{}
{{ if $s.Interface }}
_ {{ $s.Interface }} = &{{ $s.Name }}{}
{{ end }}
)

{{- if $s.Method }}
// {{ $s.Method }} invokes method {{ $s.RawType }} returning error if any.
{{- if $s.Docs }}
{{- range $d := $s.Docs }}
// {{ trim $d }}
{{- end }}
{{- end }}
{{- if $s.Links }}
    {{- template "print_links" $s.Links }}
{{- end }}
{{- if $s.Errors }}
    {{- template "print_errors" $s.Errors }}
{{- end }}
{{- if $s.URL }}
//
// See {{ $s.URL }} for reference.
{{- end }}
{{- if $s.BotCanUse }}
// Can be used by bots.
{{- end }}
{{- if $s.Result }}
{{- if $s.ResultSingular }}
func {{ $s.Method }}({{ template "request_params" $s }}) ({{ if not $s.ResultVector }}*{{ $s.Result }}{{ else }}{{ template "slice_result_name" $s }}{{ end }}, error) {
    var result {{ $s.Result }}
    {{ template "pack_request" $s }}
    if err := rpc.InvokeRaw(ctx, request, &result); err != nil {
        return nil, err
    }
    {{- if $s.ResultVector }}
    return {{ template "slice_result_name" $s }}(result.Elems), nil
    {{- else }}
    return &result, nil
    {{- end }}
}
{{- else }}
func {{ $s.Method }}({{ template "request_params" $s }}) ({{if ne $s.Result "BoolClass"}}{{ $s.Result }}{{ else }}bool{{ end }}, error) {
    var result {{ $s.ResultFunc }}Box
    {{ template "pack_request" $s }}
    if err := rpc.InvokeRaw(ctx, request, &result); err != nil {
{{- if ne $s.Result "BoolClass" }}return nil, err{{- else }}return false, err{{- end }}
    }
    {{- if ne $s.Result "BoolClass" }}
    return result.{{ $s.ResultBaseName }}, nil
    {{- else }}
    _, ok := result.{{ $s.ResultBaseName }}.(*BoolTrue)
    return ok, nil
    {{- end }}
}
{{- end }}
{{- else }}
func {{ $s.Method }}({{ template "request_params" $s }}) error {
    var ok Ok
    {{ template "pack_request" $s }}
    if err := rpc.InvokeRaw(ctx, request, &ok); err != nil {
        return err
    }
    return nil
}
{{- end }}
{{- end }}
{{ end }}

{{ range $f := $.Interfaces }}
// {{ $f.Name }} represents {{ $f.RawType }} generic type.
//
{{- if $f.URL }}
// See {{ $f.URL }} for reference.
//
{{- end }}
// Example:
//  g, err := {{ $.Package }}.Decode{{ $f.Func }}(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
{{ range $c := $f.Constructors -}}
//  case *{{ $.Package }}.{{ $c.Name }}: // {{ $c.RawType }}
{{ end -}}
//  default: panic(v)
//  }
type {{ $f.Name }} interface {
{{ template  "class_interface_header" $f }}

{{ range $field := $f.SharedFields.Common -}}
    // {{ $field.Comment }}
    {{- if $field.Links }}
        {{- template "print_links" $field.Links }}
    {{- end }}
    {{ template "getter_func_type" $field -}}

    {{- if not $field.DoubleSlice }}
    {{- if not $field.Slice }}
    {{- $mappings := index ($.Mappings) ($field.Type) -}}
    {{- range $mapping := $mappings -}}
    // {{ $field.Comment }}
    Get{{ $field.Name }}As{{ $mapping.MapperName }}() ({{ template "print_mapper_type" $mapping }}, bool)
    {{- end }}
    {{ else }}{{- if $field.Interface }}
    // {{ $field.Comment }}
    Map{{ $field.Name }}() (value {{ template "slice_field_name" $field }}{{ if $field.Conditional }}, ok bool{{ end }})
    {{- end }}{{- end }}

    {{- end }}
{{- end }}
{{- range $mapping := $f.Mappings -}}{{- if not $mapping.Constructor -}}
    // As{{ $mapping.MapperName }} tries to map {{ $f.Name }} to {{ $mapping.Name }}.
    {{ template "mapper_func_type" $mapping }}
{{ end }}{{ end }}
}

{{ range $mapping := $f.Mappings -}}{{- if not ($mapping.Concrete) }}
// {{ $mapping.Name }} represents {{ $mapping.MapperName }} subset of {{ $f.Name }}.
type {{ $mapping.Name }} interface {
{{ template  "class_interface_header" $f }}

{{ range $field := index ($f.SharedFields) ($mapping.MapperName) -}}{{- /*gotype: github.com/gotd/td/internal/gen.fieldDef*/ -}}
    // {{ $field.Comment }}
    {{- if $field.Links }}
        {{- template "print_links" $field.Links }}
    {{- end }}
    {{ template "getter_func_type" $field}}
{{ end }}
}
{{- end }}

{{ range $s := $f.Constructors -}}{{- if or (not $mapping.Constructor) (eq ($s.Name) ($mapping.Constructor)) }}
// As{{ $mapping.MapperName }} tries to map {{ $s.Name }} to {{ $mapping.Name }}.
func ({{ $s.Receiver }} *{{ $s.Name }}) {{ template "mapper_func_type" $mapping }} {
{{- if not ($mapping.Concrete) }}
    value, ok := ({{ $f.Name }}({{ $s.Receiver }})).({{ $mapping.Name }})
    return value, ok
{{- else }}{{- if $mapping.Fields }}
    value := new({{ $mapping.Name }})
    {{- range $pair := $mapping.Fields -}}
    {{- if and ($pair.L.Conditional) (not $pair.L.ConditionalBool) }}
    if fieldValue, ok := {{ $s.Receiver }}.Get{{ $pair.L.Name }}(); ok {
        {{- if $pair.R.Conditional }}
        value.Set{{ $pair.R.Name }}(fieldValue)
        {{- else }}
        value.{{ $pair.R.Name }} = fieldValue
        {{- end }}
    }
    {{ else }}
        {{- if $pair.R.Conditional -}}
        value.Set{{ $pair.R.Name }}({{ $s.Receiver }}.Get{{ $pair.L.Name }}())
        {{- else }}
        value.{{ $pair.R.Name }} = {{ $s.Receiver }}.Get{{ $pair.L.Name }}()
        {{- end }}
    {{- end }}
    {{- end }}

    return value
{{- else }}
    {{- if eq ($s.Name) ($mapping.Name) }} return {{ $s.Receiver }}, true
    {{- else }} return nil, false {{ end }}
{{- end }}{{- end }}
}
{{ end }}
{{ end }}{{ end }}

// Decode{{ $f.Func }} implements binary de-serialization for {{ $f.Name }}.
func Decode{{ $f.Func }} (buf *bin.Buffer) ({{ $f.Name }}, error) {
    id, err := buf.PeekID()
    if err != nil {
        return nil, err
    }
    switch id {
    {{- range $c := $f.Constructors }}
    case {{ $c.Name }}TypeID:
        // Decoding {{ $c.RawType }}.
        v := {{ $c.Name }}{}
        if err := v.Decode(buf); err != nil {
            return nil, fmt.Errorf("unable to decode {{ $f.Name }}: %w", err)
        }
        return &v, nil
    {{- end }}
    default:
        return nil, fmt.Errorf("unable to decode {{ $f.Name }}: %w", bin.NewUnexpectedID(id))
    }
}

// {{ $f.Func }} boxes the {{ $f.Name }} providing a helper.
type {{ $f.Func }}Box struct {
    {{ $f.BaseName }} {{ $f.Name }}
}

// Decode implements bin.Decoder for {{ $f.Func }}Box.
func (b *{{ $f.Func }}Box) Decode(buf *bin.Buffer) error {
    if b == nil {
        return fmt.Errorf("unable to decode {{ $f.Func }}Box to nil")
    }
    v, err := Decode{{ $f.Func }}(buf)
    if err != nil {
        return fmt.Errorf("unable to decode boxed value: %w", err)
    }
    b.{{ $f.BaseName }} = v
    return nil
}

// Encode implements bin.Encode for {{ $f.Func }}Box.
func (b *{{ $f.Func }}Box) Encode(buf *bin.Buffer) error {
    if b == nil || b.{{ $f.BaseName }} == nil {
        return fmt.Errorf("unable to encode {{ $f.Name }} as nil")
    }
    return b.{{ $f.BaseName }}.Encode(buf)
}
{{ end }}

{{ template "slices" $ }}
{{ end }}
