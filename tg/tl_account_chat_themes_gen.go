// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// AccountChatThemesNotModified represents TL type `account.chatThemesNotModified#e011e1c4`.
//
// See https://core.telegram.org/constructor/account.chatThemesNotModified for reference.
type AccountChatThemesNotModified struct {
}

// AccountChatThemesNotModifiedTypeID is TL type id of AccountChatThemesNotModified.
const AccountChatThemesNotModifiedTypeID = 0xe011e1c4

func (c *AccountChatThemesNotModified) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *AccountChatThemesNotModified) String() string {
	if c == nil {
		return "AccountChatThemesNotModified(nil)"
	}
	type Alias AccountChatThemesNotModified
	return fmt.Sprintf("AccountChatThemesNotModified%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AccountChatThemesNotModified) TypeID() uint32 {
	return AccountChatThemesNotModifiedTypeID
}

// TypeName returns name of type in TL schema.
func (*AccountChatThemesNotModified) TypeName() string {
	return "account.chatThemesNotModified"
}

// TypeInfo returns info about TL type.
func (c *AccountChatThemesNotModified) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "account.chatThemesNotModified",
		ID:   AccountChatThemesNotModifiedTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *AccountChatThemesNotModified) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode account.chatThemesNotModified#e011e1c4 as nil")
	}
	b.PutID(AccountChatThemesNotModifiedTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *AccountChatThemesNotModified) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode account.chatThemesNotModified#e011e1c4 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *AccountChatThemesNotModified) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode account.chatThemesNotModified#e011e1c4 to nil")
	}
	if err := b.ConsumeID(AccountChatThemesNotModifiedTypeID); err != nil {
		return fmt.Errorf("unable to decode account.chatThemesNotModified#e011e1c4: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *AccountChatThemesNotModified) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode account.chatThemesNotModified#e011e1c4 to nil")
	}
	return nil
}

// construct implements constructor of AccountChatThemesClass.
func (c AccountChatThemesNotModified) construct() AccountChatThemesClass { return &c }

// Ensuring interfaces in compile-time for AccountChatThemesNotModified.
var (
	_ bin.Encoder     = &AccountChatThemesNotModified{}
	_ bin.Decoder     = &AccountChatThemesNotModified{}
	_ bin.BareEncoder = &AccountChatThemesNotModified{}
	_ bin.BareDecoder = &AccountChatThemesNotModified{}

	_ AccountChatThemesClass = &AccountChatThemesNotModified{}
)

// AccountChatThemes represents TL type `account.chatThemes#fe4cbebd`.
//
// See https://core.telegram.org/constructor/account.chatThemes for reference.
type AccountChatThemes struct {
	// Hash field of AccountChatThemes.
	Hash int
	// Themes field of AccountChatThemes.
	Themes []ChatTheme
}

// AccountChatThemesTypeID is TL type id of AccountChatThemes.
const AccountChatThemesTypeID = 0xfe4cbebd

func (c *AccountChatThemes) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Hash == 0) {
		return false
	}
	if !(c.Themes == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *AccountChatThemes) String() string {
	if c == nil {
		return "AccountChatThemes(nil)"
	}
	type Alias AccountChatThemes
	return fmt.Sprintf("AccountChatThemes%+v", Alias(*c))
}

// FillFrom fills AccountChatThemes from given interface.
func (c *AccountChatThemes) FillFrom(from interface {
	GetHash() (value int)
	GetThemes() (value []ChatTheme)
}) {
	c.Hash = from.GetHash()
	c.Themes = from.GetThemes()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AccountChatThemes) TypeID() uint32 {
	return AccountChatThemesTypeID
}

// TypeName returns name of type in TL schema.
func (*AccountChatThemes) TypeName() string {
	return "account.chatThemes"
}

// TypeInfo returns info about TL type.
func (c *AccountChatThemes) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "account.chatThemes",
		ID:   AccountChatThemesTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Hash",
			SchemaName: "hash",
		},
		{
			Name:       "Themes",
			SchemaName: "themes",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *AccountChatThemes) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode account.chatThemes#fe4cbebd as nil")
	}
	b.PutID(AccountChatThemesTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *AccountChatThemes) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode account.chatThemes#fe4cbebd as nil")
	}
	b.PutInt(c.Hash)
	b.PutVectorHeader(len(c.Themes))
	for idx, v := range c.Themes {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode account.chatThemes#fe4cbebd: field themes element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetHash returns value of Hash field.
func (c *AccountChatThemes) GetHash() (value int) {
	return c.Hash
}

// GetThemes returns value of Themes field.
func (c *AccountChatThemes) GetThemes() (value []ChatTheme) {
	return c.Themes
}

// Decode implements bin.Decoder.
func (c *AccountChatThemes) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode account.chatThemes#fe4cbebd to nil")
	}
	if err := b.ConsumeID(AccountChatThemesTypeID); err != nil {
		return fmt.Errorf("unable to decode account.chatThemes#fe4cbebd: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *AccountChatThemes) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode account.chatThemes#fe4cbebd to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode account.chatThemes#fe4cbebd: field hash: %w", err)
		}
		c.Hash = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode account.chatThemes#fe4cbebd: field themes: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value ChatTheme
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode account.chatThemes#fe4cbebd: field themes: %w", err)
			}
			c.Themes = append(c.Themes, value)
		}
	}
	return nil
}

// construct implements constructor of AccountChatThemesClass.
func (c AccountChatThemes) construct() AccountChatThemesClass { return &c }

// Ensuring interfaces in compile-time for AccountChatThemes.
var (
	_ bin.Encoder     = &AccountChatThemes{}
	_ bin.Decoder     = &AccountChatThemes{}
	_ bin.BareEncoder = &AccountChatThemes{}
	_ bin.BareDecoder = &AccountChatThemes{}

	_ AccountChatThemesClass = &AccountChatThemes{}
)

// AccountChatThemesClass represents account.ChatThemes generic type.
//
// See https://core.telegram.org/type/account.ChatThemes for reference.
//
// Example:
//  g, err := tg.DecodeAccountChatThemes(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.AccountChatThemesNotModified: // account.chatThemesNotModified#e011e1c4
//  case *tg.AccountChatThemes: // account.chatThemes#fe4cbebd
//  default: panic(v)
//  }
type AccountChatThemesClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() AccountChatThemesClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// AsModified tries to map AccountChatThemesClass to AccountChatThemes.
	AsModified() (*AccountChatThemes, bool)
}

// AsModified tries to map AccountChatThemesNotModified to AccountChatThemes.
func (c *AccountChatThemesNotModified) AsModified() (*AccountChatThemes, bool) {
	return nil, false
}

// AsModified tries to map AccountChatThemes to AccountChatThemes.
func (c *AccountChatThemes) AsModified() (*AccountChatThemes, bool) {
	return c, true
}

// DecodeAccountChatThemes implements binary de-serialization for AccountChatThemesClass.
func DecodeAccountChatThemes(buf *bin.Buffer) (AccountChatThemesClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case AccountChatThemesNotModifiedTypeID:
		// Decoding account.chatThemesNotModified#e011e1c4.
		v := AccountChatThemesNotModified{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode AccountChatThemesClass: %w", err)
		}
		return &v, nil
	case AccountChatThemesTypeID:
		// Decoding account.chatThemes#fe4cbebd.
		v := AccountChatThemes{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode AccountChatThemesClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode AccountChatThemesClass: %w", bin.NewUnexpectedID(id))
	}
}

// AccountChatThemes boxes the AccountChatThemesClass providing a helper.
type AccountChatThemesBox struct {
	ChatThemes AccountChatThemesClass
}

// Decode implements bin.Decoder for AccountChatThemesBox.
func (b *AccountChatThemesBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode AccountChatThemesBox to nil")
	}
	v, err := DecodeAccountChatThemes(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChatThemes = v
	return nil
}

// Encode implements bin.Encode for AccountChatThemesBox.
func (b *AccountChatThemesBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChatThemes == nil {
		return fmt.Errorf("unable to encode AccountChatThemesClass as nil")
	}
	return b.ChatThemes.Encode(buf)
}

// AccountChatThemesClassArray is adapter for slice of AccountChatThemesClass.
type AccountChatThemesClassArray []AccountChatThemesClass

// Sort sorts slice of AccountChatThemesClass.
func (s AccountChatThemesClassArray) Sort(less func(a, b AccountChatThemesClass) bool) AccountChatThemesClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of AccountChatThemesClass.
func (s AccountChatThemesClassArray) SortStable(less func(a, b AccountChatThemesClass) bool) AccountChatThemesClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of AccountChatThemesClass.
func (s AccountChatThemesClassArray) Retain(keep func(x AccountChatThemesClass) bool) AccountChatThemesClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s AccountChatThemesClassArray) First() (v AccountChatThemesClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s AccountChatThemesClassArray) Last() (v AccountChatThemesClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *AccountChatThemesClassArray) PopFirst() (v AccountChatThemesClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero AccountChatThemesClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *AccountChatThemesClassArray) Pop() (v AccountChatThemesClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsAccountChatThemes returns copy with only AccountChatThemes constructors.
func (s AccountChatThemesClassArray) AsAccountChatThemes() (to AccountChatThemesArray) {
	for _, elem := range s {
		value, ok := elem.(*AccountChatThemes)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AppendOnlyModified appends only Modified constructors to
// given slice.
func (s AccountChatThemesClassArray) AppendOnlyModified(to []*AccountChatThemes) []*AccountChatThemes {
	for _, elem := range s {
		value, ok := elem.AsModified()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsModified returns copy with only Modified constructors.
func (s AccountChatThemesClassArray) AsModified() (to []*AccountChatThemes) {
	return s.AppendOnlyModified(to)
}

// FirstAsModified returns first element of slice (if exists).
func (s AccountChatThemesClassArray) FirstAsModified() (v *AccountChatThemes, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsModified()
}

// LastAsModified returns last element of slice (if exists).
func (s AccountChatThemesClassArray) LastAsModified() (v *AccountChatThemes, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopFirstAsModified returns element of slice (if exists).
func (s *AccountChatThemesClassArray) PopFirstAsModified() (v *AccountChatThemes, ok bool) {
	value, ok := s.PopFirst()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopAsModified returns element of slice (if exists).
func (s *AccountChatThemesClassArray) PopAsModified() (v *AccountChatThemes, ok bool) {
	value, ok := s.Pop()
	if !ok {
		return
	}
	return value.AsModified()
}

// AccountChatThemesArray is adapter for slice of AccountChatThemes.
type AccountChatThemesArray []AccountChatThemes

// Sort sorts slice of AccountChatThemes.
func (s AccountChatThemesArray) Sort(less func(a, b AccountChatThemes) bool) AccountChatThemesArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of AccountChatThemes.
func (s AccountChatThemesArray) SortStable(less func(a, b AccountChatThemes) bool) AccountChatThemesArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of AccountChatThemes.
func (s AccountChatThemesArray) Retain(keep func(x AccountChatThemes) bool) AccountChatThemesArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s AccountChatThemesArray) First() (v AccountChatThemes, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s AccountChatThemesArray) Last() (v AccountChatThemes, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *AccountChatThemesArray) PopFirst() (v AccountChatThemes, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero AccountChatThemes
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *AccountChatThemesArray) Pop() (v AccountChatThemes, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
