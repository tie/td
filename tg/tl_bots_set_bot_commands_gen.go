// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// BotsSetBotCommandsRequest represents TL type `bots.setBotCommands#805d46f6`.
// Set bot command list
//
// See https://core.telegram.org/method/bots.setBotCommands for reference.
type BotsSetBotCommandsRequest struct {
	// Bot commands
	Commands []BotCommand
}

// BotsSetBotCommandsRequestTypeID is TL type id of BotsSetBotCommandsRequest.
const BotsSetBotCommandsRequestTypeID = 0x805d46f6

func (s *BotsSetBotCommandsRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Commands == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *BotsSetBotCommandsRequest) String() string {
	if s == nil {
		return "BotsSetBotCommandsRequest(nil)"
	}
	type Alias BotsSetBotCommandsRequest
	return fmt.Sprintf("BotsSetBotCommandsRequest%+v", Alias(*s))
}

// FillFrom fills BotsSetBotCommandsRequest from given interface.
func (s *BotsSetBotCommandsRequest) FillFrom(from interface {
	GetCommands() (value []BotCommand)
}) {
	s.Commands = from.GetCommands()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BotsSetBotCommandsRequest) TypeID() uint32 {
	return BotsSetBotCommandsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*BotsSetBotCommandsRequest) TypeName() string {
	return "bots.setBotCommands"
}

// TypeInfo returns info about TL type.
func (s *BotsSetBotCommandsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "bots.setBotCommands",
		ID:   BotsSetBotCommandsRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Commands",
			SchemaName: "commands",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *BotsSetBotCommandsRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode bots.setBotCommands#805d46f6 as nil")
	}
	b.PutID(BotsSetBotCommandsRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *BotsSetBotCommandsRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode bots.setBotCommands#805d46f6 as nil")
	}
	b.PutVectorHeader(len(s.Commands))
	for idx, v := range s.Commands {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode bots.setBotCommands#805d46f6: field commands element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetCommands returns value of Commands field.
func (s *BotsSetBotCommandsRequest) GetCommands() (value []BotCommand) {
	return s.Commands
}

// Decode implements bin.Decoder.
func (s *BotsSetBotCommandsRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode bots.setBotCommands#805d46f6 to nil")
	}
	if err := b.ConsumeID(BotsSetBotCommandsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode bots.setBotCommands#805d46f6: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *BotsSetBotCommandsRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode bots.setBotCommands#805d46f6 to nil")
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode bots.setBotCommands#805d46f6: field commands: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value BotCommand
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode bots.setBotCommands#805d46f6: field commands: %w", err)
			}
			s.Commands = append(s.Commands, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for BotsSetBotCommandsRequest.
var (
	_ bin.Encoder     = &BotsSetBotCommandsRequest{}
	_ bin.Decoder     = &BotsSetBotCommandsRequest{}
	_ bin.BareEncoder = &BotsSetBotCommandsRequest{}
	_ bin.BareDecoder = &BotsSetBotCommandsRequest{}
)

// BotsSetBotCommands invokes method bots.setBotCommands#805d46f6 returning error if any.
// Set bot command list
//
// See https://core.telegram.org/method/bots.setBotCommands for reference.
// Can be used by bots.
func BotsSetBotCommands(ctx context.Context, rpc Invoker, commands []BotCommand) (bool, error) {
	var result BoolBox

	request := &BotsSetBotCommandsRequest{
		Commands: commands,
	}
	if err := rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
