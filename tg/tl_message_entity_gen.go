// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// MessageEntityUnknown represents TL type `messageEntityUnknown#bb92ba95`.
// Unknown message entity
//
// See https://core.telegram.org/constructor/messageEntityUnknown for reference.
type MessageEntityUnknown struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityUnknownTypeID is TL type id of MessageEntityUnknown.
const MessageEntityUnknownTypeID = 0xbb92ba95

func (m *MessageEntityUnknown) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityUnknown) String() string {
	if m == nil {
		return "MessageEntityUnknown(nil)"
	}
	type Alias MessageEntityUnknown
	return fmt.Sprintf("MessageEntityUnknown%+v", Alias(*m))
}

// FillFrom fills MessageEntityUnknown from given interface.
func (m *MessageEntityUnknown) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityUnknown) TypeID() uint32 {
	return MessageEntityUnknownTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityUnknown) TypeName() string {
	return "messageEntityUnknown"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityUnknown) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityUnknown",
		ID:   MessageEntityUnknownTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityUnknown) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityUnknown#bb92ba95 as nil")
	}
	b.PutID(MessageEntityUnknownTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityUnknown) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityUnknown#bb92ba95 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityUnknown) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityUnknown) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityUnknown) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityUnknown#bb92ba95 to nil")
	}
	if err := b.ConsumeID(MessageEntityUnknownTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityUnknown#bb92ba95: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityUnknown) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityUnknown#bb92ba95 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUnknown#bb92ba95: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUnknown#bb92ba95: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityUnknown) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityUnknown.
var (
	_ bin.Encoder     = &MessageEntityUnknown{}
	_ bin.Decoder     = &MessageEntityUnknown{}
	_ bin.BareEncoder = &MessageEntityUnknown{}
	_ bin.BareDecoder = &MessageEntityUnknown{}

	_ MessageEntityClass = &MessageEntityUnknown{}
)

// MessageEntityMention represents TL type `messageEntityMention#fa04579d`.
// Message entity mentioningÂ¹ the current user
//
// Links:
//  1) https://core.telegram.org/api/mentions
//
// See https://core.telegram.org/constructor/messageEntityMention for reference.
type MessageEntityMention struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityMentionTypeID is TL type id of MessageEntityMention.
const MessageEntityMentionTypeID = 0xfa04579d

func (m *MessageEntityMention) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityMention) String() string {
	if m == nil {
		return "MessageEntityMention(nil)"
	}
	type Alias MessageEntityMention
	return fmt.Sprintf("MessageEntityMention%+v", Alias(*m))
}

// FillFrom fills MessageEntityMention from given interface.
func (m *MessageEntityMention) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityMention) TypeID() uint32 {
	return MessageEntityMentionTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityMention) TypeName() string {
	return "messageEntityMention"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityMention) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityMention",
		ID:   MessageEntityMentionTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityMention) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityMention#fa04579d as nil")
	}
	b.PutID(MessageEntityMentionTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityMention) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityMention#fa04579d as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityMention) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityMention) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityMention) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityMention#fa04579d to nil")
	}
	if err := b.ConsumeID(MessageEntityMentionTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityMention#fa04579d: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityMention) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityMention#fa04579d to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMention#fa04579d: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMention#fa04579d: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityMention) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityMention.
var (
	_ bin.Encoder     = &MessageEntityMention{}
	_ bin.Decoder     = &MessageEntityMention{}
	_ bin.BareEncoder = &MessageEntityMention{}
	_ bin.BareDecoder = &MessageEntityMention{}

	_ MessageEntityClass = &MessageEntityMention{}
)

// MessageEntityHashtag represents TL type `messageEntityHashtag#6f635b0d`.
// #hashtag message entity
//
// See https://core.telegram.org/constructor/messageEntityHashtag for reference.
type MessageEntityHashtag struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityHashtagTypeID is TL type id of MessageEntityHashtag.
const MessageEntityHashtagTypeID = 0x6f635b0d

func (m *MessageEntityHashtag) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityHashtag) String() string {
	if m == nil {
		return "MessageEntityHashtag(nil)"
	}
	type Alias MessageEntityHashtag
	return fmt.Sprintf("MessageEntityHashtag%+v", Alias(*m))
}

// FillFrom fills MessageEntityHashtag from given interface.
func (m *MessageEntityHashtag) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityHashtag) TypeID() uint32 {
	return MessageEntityHashtagTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityHashtag) TypeName() string {
	return "messageEntityHashtag"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityHashtag) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityHashtag",
		ID:   MessageEntityHashtagTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityHashtag) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityHashtag#6f635b0d as nil")
	}
	b.PutID(MessageEntityHashtagTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityHashtag) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityHashtag#6f635b0d as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityHashtag) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityHashtag) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityHashtag) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityHashtag#6f635b0d to nil")
	}
	if err := b.ConsumeID(MessageEntityHashtagTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityHashtag#6f635b0d: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityHashtag) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityHashtag#6f635b0d to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityHashtag#6f635b0d: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityHashtag#6f635b0d: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityHashtag) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityHashtag.
var (
	_ bin.Encoder     = &MessageEntityHashtag{}
	_ bin.Decoder     = &MessageEntityHashtag{}
	_ bin.BareEncoder = &MessageEntityHashtag{}
	_ bin.BareDecoder = &MessageEntityHashtag{}

	_ MessageEntityClass = &MessageEntityHashtag{}
)

// MessageEntityBotCommand represents TL type `messageEntityBotCommand#6cef8ac7`.
// Message entity representing a bot /command
//
// See https://core.telegram.org/constructor/messageEntityBotCommand for reference.
type MessageEntityBotCommand struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityBotCommandTypeID is TL type id of MessageEntityBotCommand.
const MessageEntityBotCommandTypeID = 0x6cef8ac7

func (m *MessageEntityBotCommand) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityBotCommand) String() string {
	if m == nil {
		return "MessageEntityBotCommand(nil)"
	}
	type Alias MessageEntityBotCommand
	return fmt.Sprintf("MessageEntityBotCommand%+v", Alias(*m))
}

// FillFrom fills MessageEntityBotCommand from given interface.
func (m *MessageEntityBotCommand) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityBotCommand) TypeID() uint32 {
	return MessageEntityBotCommandTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityBotCommand) TypeName() string {
	return "messageEntityBotCommand"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityBotCommand) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityBotCommand",
		ID:   MessageEntityBotCommandTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityBotCommand) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBotCommand#6cef8ac7 as nil")
	}
	b.PutID(MessageEntityBotCommandTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityBotCommand) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBotCommand#6cef8ac7 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityBotCommand) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityBotCommand) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityBotCommand) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBotCommand#6cef8ac7 to nil")
	}
	if err := b.ConsumeID(MessageEntityBotCommandTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityBotCommand#6cef8ac7: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityBotCommand) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBotCommand#6cef8ac7 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBotCommand#6cef8ac7: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBotCommand#6cef8ac7: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityBotCommand) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityBotCommand.
var (
	_ bin.Encoder     = &MessageEntityBotCommand{}
	_ bin.Decoder     = &MessageEntityBotCommand{}
	_ bin.BareEncoder = &MessageEntityBotCommand{}
	_ bin.BareDecoder = &MessageEntityBotCommand{}

	_ MessageEntityClass = &MessageEntityBotCommand{}
)

// MessageEntityURL represents TL type `messageEntityUrl#6ed02538`.
// Message entity representing an in-text url: https://google.comÂ¹; for text urlsÂ², use
// messageEntityTextUrlÂ³.
//
// Links:
//  1) https://google.com
//  2) https://google.com
//  3) https://core.telegram.org/constructor/messageEntityTextUrl
//
// See https://core.telegram.org/constructor/messageEntityUrl for reference.
type MessageEntityURL struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityURLTypeID is TL type id of MessageEntityURL.
const MessageEntityURLTypeID = 0x6ed02538

func (m *MessageEntityURL) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityURL) String() string {
	if m == nil {
		return "MessageEntityURL(nil)"
	}
	type Alias MessageEntityURL
	return fmt.Sprintf("MessageEntityURL%+v", Alias(*m))
}

// FillFrom fills MessageEntityURL from given interface.
func (m *MessageEntityURL) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityURL) TypeID() uint32 {
	return MessageEntityURLTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityURL) TypeName() string {
	return "messageEntityUrl"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityURL) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityUrl",
		ID:   MessageEntityURLTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityURL) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityUrl#6ed02538 as nil")
	}
	b.PutID(MessageEntityURLTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityURL) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityUrl#6ed02538 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityURL) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityURL) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityURL) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityUrl#6ed02538 to nil")
	}
	if err := b.ConsumeID(MessageEntityURLTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityUrl#6ed02538: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityURL) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityUrl#6ed02538 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUrl#6ed02538: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUrl#6ed02538: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityURL) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityURL.
var (
	_ bin.Encoder     = &MessageEntityURL{}
	_ bin.Decoder     = &MessageEntityURL{}
	_ bin.BareEncoder = &MessageEntityURL{}
	_ bin.BareDecoder = &MessageEntityURL{}

	_ MessageEntityClass = &MessageEntityURL{}
)

// MessageEntityEmail represents TL type `messageEntityEmail#64e475c2`.
// Message entity representing an email@example.comÂ¹.
//
// Links:
//  1) https://core.telegram.orgmailto:email@example.com
//
// See https://core.telegram.org/constructor/messageEntityEmail for reference.
type MessageEntityEmail struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityEmailTypeID is TL type id of MessageEntityEmail.
const MessageEntityEmailTypeID = 0x64e475c2

func (m *MessageEntityEmail) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityEmail) String() string {
	if m == nil {
		return "MessageEntityEmail(nil)"
	}
	type Alias MessageEntityEmail
	return fmt.Sprintf("MessageEntityEmail%+v", Alias(*m))
}

// FillFrom fills MessageEntityEmail from given interface.
func (m *MessageEntityEmail) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityEmail) TypeID() uint32 {
	return MessageEntityEmailTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityEmail) TypeName() string {
	return "messageEntityEmail"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityEmail) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityEmail",
		ID:   MessageEntityEmailTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityEmail) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityEmail#64e475c2 as nil")
	}
	b.PutID(MessageEntityEmailTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityEmail) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityEmail#64e475c2 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityEmail) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityEmail) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityEmail) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityEmail#64e475c2 to nil")
	}
	if err := b.ConsumeID(MessageEntityEmailTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityEmail#64e475c2: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityEmail) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityEmail#64e475c2 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityEmail#64e475c2: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityEmail#64e475c2: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityEmail) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityEmail.
var (
	_ bin.Encoder     = &MessageEntityEmail{}
	_ bin.Decoder     = &MessageEntityEmail{}
	_ bin.BareEncoder = &MessageEntityEmail{}
	_ bin.BareDecoder = &MessageEntityEmail{}

	_ MessageEntityClass = &MessageEntityEmail{}
)

// MessageEntityBold represents TL type `messageEntityBold#bd610bc9`.
// Message entity representing bold text.
//
// See https://core.telegram.org/constructor/messageEntityBold for reference.
type MessageEntityBold struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityBoldTypeID is TL type id of MessageEntityBold.
const MessageEntityBoldTypeID = 0xbd610bc9

func (m *MessageEntityBold) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityBold) String() string {
	if m == nil {
		return "MessageEntityBold(nil)"
	}
	type Alias MessageEntityBold
	return fmt.Sprintf("MessageEntityBold%+v", Alias(*m))
}

// FillFrom fills MessageEntityBold from given interface.
func (m *MessageEntityBold) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityBold) TypeID() uint32 {
	return MessageEntityBoldTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityBold) TypeName() string {
	return "messageEntityBold"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityBold) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityBold",
		ID:   MessageEntityBoldTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityBold) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBold#bd610bc9 as nil")
	}
	b.PutID(MessageEntityBoldTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityBold) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBold#bd610bc9 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityBold) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityBold) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityBold) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBold#bd610bc9 to nil")
	}
	if err := b.ConsumeID(MessageEntityBoldTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityBold#bd610bc9: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityBold) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBold#bd610bc9 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBold#bd610bc9: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBold#bd610bc9: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityBold) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityBold.
var (
	_ bin.Encoder     = &MessageEntityBold{}
	_ bin.Decoder     = &MessageEntityBold{}
	_ bin.BareEncoder = &MessageEntityBold{}
	_ bin.BareDecoder = &MessageEntityBold{}

	_ MessageEntityClass = &MessageEntityBold{}
)

// MessageEntityItalic represents TL type `messageEntityItalic#826f8b60`.
// Message entity representing italic text.
//
// See https://core.telegram.org/constructor/messageEntityItalic for reference.
type MessageEntityItalic struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityItalicTypeID is TL type id of MessageEntityItalic.
const MessageEntityItalicTypeID = 0x826f8b60

func (m *MessageEntityItalic) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityItalic) String() string {
	if m == nil {
		return "MessageEntityItalic(nil)"
	}
	type Alias MessageEntityItalic
	return fmt.Sprintf("MessageEntityItalic%+v", Alias(*m))
}

// FillFrom fills MessageEntityItalic from given interface.
func (m *MessageEntityItalic) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityItalic) TypeID() uint32 {
	return MessageEntityItalicTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityItalic) TypeName() string {
	return "messageEntityItalic"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityItalic) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityItalic",
		ID:   MessageEntityItalicTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityItalic) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityItalic#826f8b60 as nil")
	}
	b.PutID(MessageEntityItalicTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityItalic) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityItalic#826f8b60 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityItalic) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityItalic) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityItalic) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityItalic#826f8b60 to nil")
	}
	if err := b.ConsumeID(MessageEntityItalicTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityItalic#826f8b60: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityItalic) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityItalic#826f8b60 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityItalic#826f8b60: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityItalic#826f8b60: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityItalic) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityItalic.
var (
	_ bin.Encoder     = &MessageEntityItalic{}
	_ bin.Decoder     = &MessageEntityItalic{}
	_ bin.BareEncoder = &MessageEntityItalic{}
	_ bin.BareDecoder = &MessageEntityItalic{}

	_ MessageEntityClass = &MessageEntityItalic{}
)

// MessageEntityCode represents TL type `messageEntityCode#28a20571`.
// Message entity representing a codeblock.
//
// See https://core.telegram.org/constructor/messageEntityCode for reference.
type MessageEntityCode struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityCodeTypeID is TL type id of MessageEntityCode.
const MessageEntityCodeTypeID = 0x28a20571

func (m *MessageEntityCode) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityCode) String() string {
	if m == nil {
		return "MessageEntityCode(nil)"
	}
	type Alias MessageEntityCode
	return fmt.Sprintf("MessageEntityCode%+v", Alias(*m))
}

// FillFrom fills MessageEntityCode from given interface.
func (m *MessageEntityCode) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityCode) TypeID() uint32 {
	return MessageEntityCodeTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityCode) TypeName() string {
	return "messageEntityCode"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityCode) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityCode",
		ID:   MessageEntityCodeTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityCode) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityCode#28a20571 as nil")
	}
	b.PutID(MessageEntityCodeTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityCode) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityCode#28a20571 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityCode) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityCode) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityCode) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityCode#28a20571 to nil")
	}
	if err := b.ConsumeID(MessageEntityCodeTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityCode#28a20571: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityCode) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityCode#28a20571 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityCode#28a20571: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityCode#28a20571: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityCode) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityCode.
var (
	_ bin.Encoder     = &MessageEntityCode{}
	_ bin.Decoder     = &MessageEntityCode{}
	_ bin.BareEncoder = &MessageEntityCode{}
	_ bin.BareDecoder = &MessageEntityCode{}

	_ MessageEntityClass = &MessageEntityCode{}
)

// MessageEntityPre represents TL type `messageEntityPre#73924be0`.
// Message entity representing a preformatted codeblock, allowing the user to specify a
// programming language for the codeblock.
//
// See https://core.telegram.org/constructor/messageEntityPre for reference.
type MessageEntityPre struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
	// Programming language of the code
	Language string
}

// MessageEntityPreTypeID is TL type id of MessageEntityPre.
const MessageEntityPreTypeID = 0x73924be0

func (m *MessageEntityPre) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}
	if !(m.Language == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityPre) String() string {
	if m == nil {
		return "MessageEntityPre(nil)"
	}
	type Alias MessageEntityPre
	return fmt.Sprintf("MessageEntityPre%+v", Alias(*m))
}

// FillFrom fills MessageEntityPre from given interface.
func (m *MessageEntityPre) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
	GetLanguage() (value string)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
	m.Language = from.GetLanguage()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityPre) TypeID() uint32 {
	return MessageEntityPreTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityPre) TypeName() string {
	return "messageEntityPre"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityPre) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityPre",
		ID:   MessageEntityPreTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
		{
			Name:       "Language",
			SchemaName: "language",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityPre) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityPre#73924be0 as nil")
	}
	b.PutID(MessageEntityPreTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityPre) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityPre#73924be0 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	b.PutString(m.Language)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityPre) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityPre) GetLength() (value int) {
	return m.Length
}

// GetLanguage returns value of Language field.
func (m *MessageEntityPre) GetLanguage() (value string) {
	return m.Language
}

// Decode implements bin.Decoder.
func (m *MessageEntityPre) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityPre#73924be0 to nil")
	}
	if err := b.ConsumeID(MessageEntityPreTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityPre#73924be0: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityPre) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityPre#73924be0 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPre#73924be0: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPre#73924be0: field length: %w", err)
		}
		m.Length = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPre#73924be0: field language: %w", err)
		}
		m.Language = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityPre) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityPre.
var (
	_ bin.Encoder     = &MessageEntityPre{}
	_ bin.Decoder     = &MessageEntityPre{}
	_ bin.BareEncoder = &MessageEntityPre{}
	_ bin.BareDecoder = &MessageEntityPre{}

	_ MessageEntityClass = &MessageEntityPre{}
)

// MessageEntityTextURL represents TL type `messageEntityTextUrl#76a6d327`.
// Message entity representing a text urlÂ¹: for in-text urls like https://google.comÂ²
// use messageEntityUrlÂ³.
//
// Links:
//  1) https://google.com
//  2) https://google.com
//  3) https://core.telegram.org/constructor/messageEntityUrl
//
// See https://core.telegram.org/constructor/messageEntityTextUrl for reference.
type MessageEntityTextURL struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
	// The actual URL
	URL string
}

// MessageEntityTextURLTypeID is TL type id of MessageEntityTextURL.
const MessageEntityTextURLTypeID = 0x76a6d327

func (m *MessageEntityTextURL) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}
	if !(m.URL == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityTextURL) String() string {
	if m == nil {
		return "MessageEntityTextURL(nil)"
	}
	type Alias MessageEntityTextURL
	return fmt.Sprintf("MessageEntityTextURL%+v", Alias(*m))
}

// FillFrom fills MessageEntityTextURL from given interface.
func (m *MessageEntityTextURL) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
	GetURL() (value string)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
	m.URL = from.GetURL()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityTextURL) TypeID() uint32 {
	return MessageEntityTextURLTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityTextURL) TypeName() string {
	return "messageEntityTextUrl"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityTextURL) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityTextUrl",
		ID:   MessageEntityTextURLTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
		{
			Name:       "URL",
			SchemaName: "url",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityTextURL) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityTextUrl#76a6d327 as nil")
	}
	b.PutID(MessageEntityTextURLTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityTextURL) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityTextUrl#76a6d327 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	b.PutString(m.URL)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityTextURL) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityTextURL) GetLength() (value int) {
	return m.Length
}

// GetURL returns value of URL field.
func (m *MessageEntityTextURL) GetURL() (value string) {
	return m.URL
}

// Decode implements bin.Decoder.
func (m *MessageEntityTextURL) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityTextUrl#76a6d327 to nil")
	}
	if err := b.ConsumeID(MessageEntityTextURLTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityTextUrl#76a6d327: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityTextURL) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityTextUrl#76a6d327 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityTextUrl#76a6d327: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityTextUrl#76a6d327: field length: %w", err)
		}
		m.Length = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityTextUrl#76a6d327: field url: %w", err)
		}
		m.URL = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityTextURL) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityTextURL.
var (
	_ bin.Encoder     = &MessageEntityTextURL{}
	_ bin.Decoder     = &MessageEntityTextURL{}
	_ bin.BareEncoder = &MessageEntityTextURL{}
	_ bin.BareDecoder = &MessageEntityTextURL{}

	_ MessageEntityClass = &MessageEntityTextURL{}
)

// MessageEntityMentionName represents TL type `messageEntityMentionName#dc7b1140`.
// Message entity representing a user mentionÂ¹: for creating a mention use
// inputMessageEntityMentionNameÂ².
//
// Links:
//  1) https://core.telegram.org/api/mentions
//  2) https://core.telegram.org/constructor/inputMessageEntityMentionName
//
// See https://core.telegram.org/constructor/messageEntityMentionName for reference.
type MessageEntityMentionName struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
	// Identifier of the user that was mentioned
	UserID int64
}

// MessageEntityMentionNameTypeID is TL type id of MessageEntityMentionName.
const MessageEntityMentionNameTypeID = 0xdc7b1140

func (m *MessageEntityMentionName) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}
	if !(m.UserID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityMentionName) String() string {
	if m == nil {
		return "MessageEntityMentionName(nil)"
	}
	type Alias MessageEntityMentionName
	return fmt.Sprintf("MessageEntityMentionName%+v", Alias(*m))
}

// FillFrom fills MessageEntityMentionName from given interface.
func (m *MessageEntityMentionName) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
	GetUserID() (value int64)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
	m.UserID = from.GetUserID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityMentionName) TypeID() uint32 {
	return MessageEntityMentionNameTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityMentionName) TypeName() string {
	return "messageEntityMentionName"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityMentionName) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityMentionName",
		ID:   MessageEntityMentionNameTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityMentionName) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityMentionName#dc7b1140 as nil")
	}
	b.PutID(MessageEntityMentionNameTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityMentionName) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityMentionName#dc7b1140 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	b.PutLong(m.UserID)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityMentionName) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityMentionName) GetLength() (value int) {
	return m.Length
}

// GetUserID returns value of UserID field.
func (m *MessageEntityMentionName) GetUserID() (value int64) {
	return m.UserID
}

// Decode implements bin.Decoder.
func (m *MessageEntityMentionName) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityMentionName#dc7b1140 to nil")
	}
	if err := b.ConsumeID(MessageEntityMentionNameTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityMentionName#dc7b1140: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityMentionName) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityMentionName#dc7b1140 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMentionName#dc7b1140: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMentionName#dc7b1140: field length: %w", err)
		}
		m.Length = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMentionName#dc7b1140: field user_id: %w", err)
		}
		m.UserID = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityMentionName) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityMentionName.
var (
	_ bin.Encoder     = &MessageEntityMentionName{}
	_ bin.Decoder     = &MessageEntityMentionName{}
	_ bin.BareEncoder = &MessageEntityMentionName{}
	_ bin.BareDecoder = &MessageEntityMentionName{}

	_ MessageEntityClass = &MessageEntityMentionName{}
)

// InputMessageEntityMentionName represents TL type `inputMessageEntityMentionName#208e68c9`.
// Message entity that can be used to create a user user mentionÂ¹: received mentions use
// the messageEntityMentionNameÂ² constructor, instead.
//
// Links:
//  1) https://core.telegram.org/api/mentions
//  2) https://core.telegram.org/constructor/messageEntityMentionName
//
// See https://core.telegram.org/constructor/inputMessageEntityMentionName for reference.
type InputMessageEntityMentionName struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
	// Identifier of the user that was mentioned
	UserID InputUserClass
}

// InputMessageEntityMentionNameTypeID is TL type id of InputMessageEntityMentionName.
const InputMessageEntityMentionNameTypeID = 0x208e68c9

func (i *InputMessageEntityMentionName) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.Offset == 0) {
		return false
	}
	if !(i.Length == 0) {
		return false
	}
	if !(i.UserID == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputMessageEntityMentionName) String() string {
	if i == nil {
		return "InputMessageEntityMentionName(nil)"
	}
	type Alias InputMessageEntityMentionName
	return fmt.Sprintf("InputMessageEntityMentionName%+v", Alias(*i))
}

// FillFrom fills InputMessageEntityMentionName from given interface.
func (i *InputMessageEntityMentionName) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
	GetUserID() (value InputUserClass)
}) {
	i.Offset = from.GetOffset()
	i.Length = from.GetLength()
	i.UserID = from.GetUserID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InputMessageEntityMentionName) TypeID() uint32 {
	return InputMessageEntityMentionNameTypeID
}

// TypeName returns name of type in TL schema.
func (*InputMessageEntityMentionName) TypeName() string {
	return "inputMessageEntityMentionName"
}

// TypeInfo returns info about TL type.
func (i *InputMessageEntityMentionName) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "inputMessageEntityMentionName",
		ID:   InputMessageEntityMentionNameTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InputMessageEntityMentionName) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputMessageEntityMentionName#208e68c9 as nil")
	}
	b.PutID(InputMessageEntityMentionNameTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InputMessageEntityMentionName) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputMessageEntityMentionName#208e68c9 as nil")
	}
	b.PutInt(i.Offset)
	b.PutInt(i.Length)
	if i.UserID == nil {
		return fmt.Errorf("unable to encode inputMessageEntityMentionName#208e68c9: field user_id is nil")
	}
	if err := i.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputMessageEntityMentionName#208e68c9: field user_id: %w", err)
	}
	return nil
}

// GetOffset returns value of Offset field.
func (i *InputMessageEntityMentionName) GetOffset() (value int) {
	return i.Offset
}

// GetLength returns value of Length field.
func (i *InputMessageEntityMentionName) GetLength() (value int) {
	return i.Length
}

// GetUserID returns value of UserID field.
func (i *InputMessageEntityMentionName) GetUserID() (value InputUserClass) {
	return i.UserID
}

// Decode implements bin.Decoder.
func (i *InputMessageEntityMentionName) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputMessageEntityMentionName#208e68c9 to nil")
	}
	if err := b.ConsumeID(InputMessageEntityMentionNameTypeID); err != nil {
		return fmt.Errorf("unable to decode inputMessageEntityMentionName#208e68c9: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InputMessageEntityMentionName) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputMessageEntityMentionName#208e68c9 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode inputMessageEntityMentionName#208e68c9: field offset: %w", err)
		}
		i.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode inputMessageEntityMentionName#208e68c9: field length: %w", err)
		}
		i.Length = value
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputMessageEntityMentionName#208e68c9: field user_id: %w", err)
		}
		i.UserID = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (i InputMessageEntityMentionName) construct() MessageEntityClass { return &i }

// Ensuring interfaces in compile-time for InputMessageEntityMentionName.
var (
	_ bin.Encoder     = &InputMessageEntityMentionName{}
	_ bin.Decoder     = &InputMessageEntityMentionName{}
	_ bin.BareEncoder = &InputMessageEntityMentionName{}
	_ bin.BareDecoder = &InputMessageEntityMentionName{}

	_ MessageEntityClass = &InputMessageEntityMentionName{}
)

// MessageEntityPhone represents TL type `messageEntityPhone#9b69e34b`.
// Message entity representing a phone number.
//
// See https://core.telegram.org/constructor/messageEntityPhone for reference.
type MessageEntityPhone struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityPhoneTypeID is TL type id of MessageEntityPhone.
const MessageEntityPhoneTypeID = 0x9b69e34b

func (m *MessageEntityPhone) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityPhone) String() string {
	if m == nil {
		return "MessageEntityPhone(nil)"
	}
	type Alias MessageEntityPhone
	return fmt.Sprintf("MessageEntityPhone%+v", Alias(*m))
}

// FillFrom fills MessageEntityPhone from given interface.
func (m *MessageEntityPhone) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityPhone) TypeID() uint32 {
	return MessageEntityPhoneTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityPhone) TypeName() string {
	return "messageEntityPhone"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityPhone) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityPhone",
		ID:   MessageEntityPhoneTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityPhone) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityPhone#9b69e34b as nil")
	}
	b.PutID(MessageEntityPhoneTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityPhone) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityPhone#9b69e34b as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityPhone) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityPhone) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityPhone) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityPhone#9b69e34b to nil")
	}
	if err := b.ConsumeID(MessageEntityPhoneTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityPhone#9b69e34b: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityPhone) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityPhone#9b69e34b to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPhone#9b69e34b: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPhone#9b69e34b: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityPhone) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityPhone.
var (
	_ bin.Encoder     = &MessageEntityPhone{}
	_ bin.Decoder     = &MessageEntityPhone{}
	_ bin.BareEncoder = &MessageEntityPhone{}
	_ bin.BareDecoder = &MessageEntityPhone{}

	_ MessageEntityClass = &MessageEntityPhone{}
)

// MessageEntityCashtag represents TL type `messageEntityCashtag#4c4e743f`.
// Message entity representing a $cashtag.
//
// See https://core.telegram.org/constructor/messageEntityCashtag for reference.
type MessageEntityCashtag struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityCashtagTypeID is TL type id of MessageEntityCashtag.
const MessageEntityCashtagTypeID = 0x4c4e743f

func (m *MessageEntityCashtag) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityCashtag) String() string {
	if m == nil {
		return "MessageEntityCashtag(nil)"
	}
	type Alias MessageEntityCashtag
	return fmt.Sprintf("MessageEntityCashtag%+v", Alias(*m))
}

// FillFrom fills MessageEntityCashtag from given interface.
func (m *MessageEntityCashtag) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityCashtag) TypeID() uint32 {
	return MessageEntityCashtagTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityCashtag) TypeName() string {
	return "messageEntityCashtag"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityCashtag) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityCashtag",
		ID:   MessageEntityCashtagTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityCashtag) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityCashtag#4c4e743f as nil")
	}
	b.PutID(MessageEntityCashtagTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityCashtag) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityCashtag#4c4e743f as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityCashtag) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityCashtag) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityCashtag) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityCashtag#4c4e743f to nil")
	}
	if err := b.ConsumeID(MessageEntityCashtagTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityCashtag#4c4e743f: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityCashtag) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityCashtag#4c4e743f to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityCashtag#4c4e743f: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityCashtag#4c4e743f: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityCashtag) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityCashtag.
var (
	_ bin.Encoder     = &MessageEntityCashtag{}
	_ bin.Decoder     = &MessageEntityCashtag{}
	_ bin.BareEncoder = &MessageEntityCashtag{}
	_ bin.BareDecoder = &MessageEntityCashtag{}

	_ MessageEntityClass = &MessageEntityCashtag{}
)

// MessageEntityUnderline represents TL type `messageEntityUnderline#9c4e7e8b`.
// Message entity representing underlined text.
//
// See https://core.telegram.org/constructor/messageEntityUnderline for reference.
type MessageEntityUnderline struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityUnderlineTypeID is TL type id of MessageEntityUnderline.
const MessageEntityUnderlineTypeID = 0x9c4e7e8b

func (m *MessageEntityUnderline) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityUnderline) String() string {
	if m == nil {
		return "MessageEntityUnderline(nil)"
	}
	type Alias MessageEntityUnderline
	return fmt.Sprintf("MessageEntityUnderline%+v", Alias(*m))
}

// FillFrom fills MessageEntityUnderline from given interface.
func (m *MessageEntityUnderline) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityUnderline) TypeID() uint32 {
	return MessageEntityUnderlineTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityUnderline) TypeName() string {
	return "messageEntityUnderline"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityUnderline) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityUnderline",
		ID:   MessageEntityUnderlineTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityUnderline) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityUnderline#9c4e7e8b as nil")
	}
	b.PutID(MessageEntityUnderlineTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityUnderline) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityUnderline#9c4e7e8b as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityUnderline) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityUnderline) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityUnderline) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityUnderline#9c4e7e8b to nil")
	}
	if err := b.ConsumeID(MessageEntityUnderlineTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityUnderline#9c4e7e8b: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityUnderline) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityUnderline#9c4e7e8b to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUnderline#9c4e7e8b: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUnderline#9c4e7e8b: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityUnderline) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityUnderline.
var (
	_ bin.Encoder     = &MessageEntityUnderline{}
	_ bin.Decoder     = &MessageEntityUnderline{}
	_ bin.BareEncoder = &MessageEntityUnderline{}
	_ bin.BareDecoder = &MessageEntityUnderline{}

	_ MessageEntityClass = &MessageEntityUnderline{}
)

// MessageEntityStrike represents TL type `messageEntityStrike#bf0693d4`.
// Message entity representing strikethrough text.
//
// See https://core.telegram.org/constructor/messageEntityStrike for reference.
type MessageEntityStrike struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityStrikeTypeID is TL type id of MessageEntityStrike.
const MessageEntityStrikeTypeID = 0xbf0693d4

func (m *MessageEntityStrike) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityStrike) String() string {
	if m == nil {
		return "MessageEntityStrike(nil)"
	}
	type Alias MessageEntityStrike
	return fmt.Sprintf("MessageEntityStrike%+v", Alias(*m))
}

// FillFrom fills MessageEntityStrike from given interface.
func (m *MessageEntityStrike) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityStrike) TypeID() uint32 {
	return MessageEntityStrikeTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityStrike) TypeName() string {
	return "messageEntityStrike"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityStrike) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityStrike",
		ID:   MessageEntityStrikeTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityStrike) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityStrike#bf0693d4 as nil")
	}
	b.PutID(MessageEntityStrikeTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityStrike) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityStrike#bf0693d4 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityStrike) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityStrike) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityStrike) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityStrike#bf0693d4 to nil")
	}
	if err := b.ConsumeID(MessageEntityStrikeTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityStrike#bf0693d4: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityStrike) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityStrike#bf0693d4 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityStrike#bf0693d4: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityStrike#bf0693d4: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityStrike) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityStrike.
var (
	_ bin.Encoder     = &MessageEntityStrike{}
	_ bin.Decoder     = &MessageEntityStrike{}
	_ bin.BareEncoder = &MessageEntityStrike{}
	_ bin.BareDecoder = &MessageEntityStrike{}

	_ MessageEntityClass = &MessageEntityStrike{}
)

// MessageEntityBlockquote represents TL type `messageEntityBlockquote#20df5d0`.
// Message entity representing a block quote.
//
// See https://core.telegram.org/constructor/messageEntityBlockquote for reference.
type MessageEntityBlockquote struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityBlockquoteTypeID is TL type id of MessageEntityBlockquote.
const MessageEntityBlockquoteTypeID = 0x20df5d0

func (m *MessageEntityBlockquote) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityBlockquote) String() string {
	if m == nil {
		return "MessageEntityBlockquote(nil)"
	}
	type Alias MessageEntityBlockquote
	return fmt.Sprintf("MessageEntityBlockquote%+v", Alias(*m))
}

// FillFrom fills MessageEntityBlockquote from given interface.
func (m *MessageEntityBlockquote) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityBlockquote) TypeID() uint32 {
	return MessageEntityBlockquoteTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityBlockquote) TypeName() string {
	return "messageEntityBlockquote"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityBlockquote) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityBlockquote",
		ID:   MessageEntityBlockquoteTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityBlockquote) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBlockquote#20df5d0 as nil")
	}
	b.PutID(MessageEntityBlockquoteTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityBlockquote) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBlockquote#20df5d0 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityBlockquote) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityBlockquote) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityBlockquote) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBlockquote#20df5d0 to nil")
	}
	if err := b.ConsumeID(MessageEntityBlockquoteTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityBlockquote#20df5d0: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityBlockquote) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBlockquote#20df5d0 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBlockquote#20df5d0: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBlockquote#20df5d0: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityBlockquote) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityBlockquote.
var (
	_ bin.Encoder     = &MessageEntityBlockquote{}
	_ bin.Decoder     = &MessageEntityBlockquote{}
	_ bin.BareEncoder = &MessageEntityBlockquote{}
	_ bin.BareDecoder = &MessageEntityBlockquote{}

	_ MessageEntityClass = &MessageEntityBlockquote{}
)

// MessageEntityBankCard represents TL type `messageEntityBankCard#761e6af4`.
// Indicates a credit card number
//
// See https://core.telegram.org/constructor/messageEntityBankCard for reference.
type MessageEntityBankCard struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityBankCardTypeID is TL type id of MessageEntityBankCard.
const MessageEntityBankCardTypeID = 0x761e6af4

func (m *MessageEntityBankCard) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityBankCard) String() string {
	if m == nil {
		return "MessageEntityBankCard(nil)"
	}
	type Alias MessageEntityBankCard
	return fmt.Sprintf("MessageEntityBankCard%+v", Alias(*m))
}

// FillFrom fills MessageEntityBankCard from given interface.
func (m *MessageEntityBankCard) FillFrom(from interface {
	GetOffset() (value int)
	GetLength() (value int)
}) {
	m.Offset = from.GetOffset()
	m.Length = from.GetLength()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageEntityBankCard) TypeID() uint32 {
	return MessageEntityBankCardTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageEntityBankCard) TypeName() string {
	return "messageEntityBankCard"
}

// TypeInfo returns info about TL type.
func (m *MessageEntityBankCard) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageEntityBankCard",
		ID:   MessageEntityBankCardTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Length",
			SchemaName: "length",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageEntityBankCard) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBankCard#761e6af4 as nil")
	}
	b.PutID(MessageEntityBankCardTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageEntityBankCard) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBankCard#761e6af4 as nil")
	}
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityBankCard) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityBankCard) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityBankCard) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBankCard#761e6af4 to nil")
	}
	if err := b.ConsumeID(MessageEntityBankCardTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityBankCard#761e6af4: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageEntityBankCard) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBankCard#761e6af4 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBankCard#761e6af4: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBankCard#761e6af4: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityBankCard) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityBankCard.
var (
	_ bin.Encoder     = &MessageEntityBankCard{}
	_ bin.Decoder     = &MessageEntityBankCard{}
	_ bin.BareEncoder = &MessageEntityBankCard{}
	_ bin.BareDecoder = &MessageEntityBankCard{}

	_ MessageEntityClass = &MessageEntityBankCard{}
)

// MessageEntityClass represents MessageEntity generic type.
//
// See https://core.telegram.org/type/MessageEntity for reference.
//
// Example:
//  g, err := tg.DecodeMessageEntity(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.MessageEntityUnknown: // messageEntityUnknown#bb92ba95
//  case *tg.MessageEntityMention: // messageEntityMention#fa04579d
//  case *tg.MessageEntityHashtag: // messageEntityHashtag#6f635b0d
//  case *tg.MessageEntityBotCommand: // messageEntityBotCommand#6cef8ac7
//  case *tg.MessageEntityURL: // messageEntityUrl#6ed02538
//  case *tg.MessageEntityEmail: // messageEntityEmail#64e475c2
//  case *tg.MessageEntityBold: // messageEntityBold#bd610bc9
//  case *tg.MessageEntityItalic: // messageEntityItalic#826f8b60
//  case *tg.MessageEntityCode: // messageEntityCode#28a20571
//  case *tg.MessageEntityPre: // messageEntityPre#73924be0
//  case *tg.MessageEntityTextURL: // messageEntityTextUrl#76a6d327
//  case *tg.MessageEntityMentionName: // messageEntityMentionName#dc7b1140
//  case *tg.InputMessageEntityMentionName: // inputMessageEntityMentionName#208e68c9
//  case *tg.MessageEntityPhone: // messageEntityPhone#9b69e34b
//  case *tg.MessageEntityCashtag: // messageEntityCashtag#4c4e743f
//  case *tg.MessageEntityUnderline: // messageEntityUnderline#9c4e7e8b
//  case *tg.MessageEntityStrike: // messageEntityStrike#bf0693d4
//  case *tg.MessageEntityBlockquote: // messageEntityBlockquote#20df5d0
//  case *tg.MessageEntityBankCard: // messageEntityBankCard#761e6af4
//  default: panic(v)
//  }
type MessageEntityClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() MessageEntityClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// Offset of message entity within message (in UTF-8 codepoints)
	GetOffset() (value int)

	// Length of message entity within message (in UTF-8 codepoints)
	GetLength() (value int)
}

// DecodeMessageEntity implements binary de-serialization for MessageEntityClass.
func DecodeMessageEntity(buf *bin.Buffer) (MessageEntityClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case MessageEntityUnknownTypeID:
		// Decoding messageEntityUnknown#bb92ba95.
		v := MessageEntityUnknown{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityMentionTypeID:
		// Decoding messageEntityMention#fa04579d.
		v := MessageEntityMention{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityHashtagTypeID:
		// Decoding messageEntityHashtag#6f635b0d.
		v := MessageEntityHashtag{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityBotCommandTypeID:
		// Decoding messageEntityBotCommand#6cef8ac7.
		v := MessageEntityBotCommand{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityURLTypeID:
		// Decoding messageEntityUrl#6ed02538.
		v := MessageEntityURL{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityEmailTypeID:
		// Decoding messageEntityEmail#64e475c2.
		v := MessageEntityEmail{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityBoldTypeID:
		// Decoding messageEntityBold#bd610bc9.
		v := MessageEntityBold{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityItalicTypeID:
		// Decoding messageEntityItalic#826f8b60.
		v := MessageEntityItalic{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityCodeTypeID:
		// Decoding messageEntityCode#28a20571.
		v := MessageEntityCode{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityPreTypeID:
		// Decoding messageEntityPre#73924be0.
		v := MessageEntityPre{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityTextURLTypeID:
		// Decoding messageEntityTextUrl#76a6d327.
		v := MessageEntityTextURL{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityMentionNameTypeID:
		// Decoding messageEntityMentionName#dc7b1140.
		v := MessageEntityMentionName{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case InputMessageEntityMentionNameTypeID:
		// Decoding inputMessageEntityMentionName#208e68c9.
		v := InputMessageEntityMentionName{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityPhoneTypeID:
		// Decoding messageEntityPhone#9b69e34b.
		v := MessageEntityPhone{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityCashtagTypeID:
		// Decoding messageEntityCashtag#4c4e743f.
		v := MessageEntityCashtag{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityUnderlineTypeID:
		// Decoding messageEntityUnderline#9c4e7e8b.
		v := MessageEntityUnderline{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityStrikeTypeID:
		// Decoding messageEntityStrike#bf0693d4.
		v := MessageEntityStrike{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityBlockquoteTypeID:
		// Decoding messageEntityBlockquote#20df5d0.
		v := MessageEntityBlockquote{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityBankCardTypeID:
		// Decoding messageEntityBankCard#761e6af4.
		v := MessageEntityBankCard{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", bin.NewUnexpectedID(id))
	}
}

// MessageEntity boxes the MessageEntityClass providing a helper.
type MessageEntityBox struct {
	MessageEntity MessageEntityClass
}

// Decode implements bin.Decoder for MessageEntityBox.
func (b *MessageEntityBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessageEntityBox to nil")
	}
	v, err := DecodeMessageEntity(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.MessageEntity = v
	return nil
}

// Encode implements bin.Encode for MessageEntityBox.
func (b *MessageEntityBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.MessageEntity == nil {
		return fmt.Errorf("unable to encode MessageEntityClass as nil")
	}
	return b.MessageEntity.Encode(buf)
}

// MessageEntityClassArray is adapter for slice of MessageEntityClass.
type MessageEntityClassArray []MessageEntityClass

// Sort sorts slice of MessageEntityClass.
func (s MessageEntityClassArray) Sort(less func(a, b MessageEntityClass) bool) MessageEntityClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityClass.
func (s MessageEntityClassArray) SortStable(less func(a, b MessageEntityClass) bool) MessageEntityClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityClass.
func (s MessageEntityClassArray) Retain(keep func(x MessageEntityClass) bool) MessageEntityClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityClassArray) First() (v MessageEntityClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityClassArray) Last() (v MessageEntityClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityClassArray) PopFirst() (v MessageEntityClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityClassArray) Pop() (v MessageEntityClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsMessageEntityUnknown returns copy with only MessageEntityUnknown constructors.
func (s MessageEntityClassArray) AsMessageEntityUnknown() (to MessageEntityUnknownArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityUnknown)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityMention returns copy with only MessageEntityMention constructors.
func (s MessageEntityClassArray) AsMessageEntityMention() (to MessageEntityMentionArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityMention)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityHashtag returns copy with only MessageEntityHashtag constructors.
func (s MessageEntityClassArray) AsMessageEntityHashtag() (to MessageEntityHashtagArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityHashtag)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityBotCommand returns copy with only MessageEntityBotCommand constructors.
func (s MessageEntityClassArray) AsMessageEntityBotCommand() (to MessageEntityBotCommandArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityBotCommand)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityURL returns copy with only MessageEntityURL constructors.
func (s MessageEntityClassArray) AsMessageEntityURL() (to MessageEntityURLArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityURL)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityEmail returns copy with only MessageEntityEmail constructors.
func (s MessageEntityClassArray) AsMessageEntityEmail() (to MessageEntityEmailArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityEmail)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityBold returns copy with only MessageEntityBold constructors.
func (s MessageEntityClassArray) AsMessageEntityBold() (to MessageEntityBoldArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityBold)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityItalic returns copy with only MessageEntityItalic constructors.
func (s MessageEntityClassArray) AsMessageEntityItalic() (to MessageEntityItalicArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityItalic)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityCode returns copy with only MessageEntityCode constructors.
func (s MessageEntityClassArray) AsMessageEntityCode() (to MessageEntityCodeArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityCode)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityPre returns copy with only MessageEntityPre constructors.
func (s MessageEntityClassArray) AsMessageEntityPre() (to MessageEntityPreArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityPre)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityTextURL returns copy with only MessageEntityTextURL constructors.
func (s MessageEntityClassArray) AsMessageEntityTextURL() (to MessageEntityTextURLArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityTextURL)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityMentionName returns copy with only MessageEntityMentionName constructors.
func (s MessageEntityClassArray) AsMessageEntityMentionName() (to MessageEntityMentionNameArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityMentionName)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsInputMessageEntityMentionName returns copy with only InputMessageEntityMentionName constructors.
func (s MessageEntityClassArray) AsInputMessageEntityMentionName() (to InputMessageEntityMentionNameArray) {
	for _, elem := range s {
		value, ok := elem.(*InputMessageEntityMentionName)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityPhone returns copy with only MessageEntityPhone constructors.
func (s MessageEntityClassArray) AsMessageEntityPhone() (to MessageEntityPhoneArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityPhone)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityCashtag returns copy with only MessageEntityCashtag constructors.
func (s MessageEntityClassArray) AsMessageEntityCashtag() (to MessageEntityCashtagArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityCashtag)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityUnderline returns copy with only MessageEntityUnderline constructors.
func (s MessageEntityClassArray) AsMessageEntityUnderline() (to MessageEntityUnderlineArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityUnderline)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityStrike returns copy with only MessageEntityStrike constructors.
func (s MessageEntityClassArray) AsMessageEntityStrike() (to MessageEntityStrikeArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityStrike)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityBlockquote returns copy with only MessageEntityBlockquote constructors.
func (s MessageEntityClassArray) AsMessageEntityBlockquote() (to MessageEntityBlockquoteArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityBlockquote)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessageEntityBankCard returns copy with only MessageEntityBankCard constructors.
func (s MessageEntityClassArray) AsMessageEntityBankCard() (to MessageEntityBankCardArray) {
	for _, elem := range s {
		value, ok := elem.(*MessageEntityBankCard)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// MessageEntityUnknownArray is adapter for slice of MessageEntityUnknown.
type MessageEntityUnknownArray []MessageEntityUnknown

// Sort sorts slice of MessageEntityUnknown.
func (s MessageEntityUnknownArray) Sort(less func(a, b MessageEntityUnknown) bool) MessageEntityUnknownArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityUnknown.
func (s MessageEntityUnknownArray) SortStable(less func(a, b MessageEntityUnknown) bool) MessageEntityUnknownArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityUnknown.
func (s MessageEntityUnknownArray) Retain(keep func(x MessageEntityUnknown) bool) MessageEntityUnknownArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityUnknownArray) First() (v MessageEntityUnknown, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityUnknownArray) Last() (v MessageEntityUnknown, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityUnknownArray) PopFirst() (v MessageEntityUnknown, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityUnknown
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityUnknownArray) Pop() (v MessageEntityUnknown, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityMentionArray is adapter for slice of MessageEntityMention.
type MessageEntityMentionArray []MessageEntityMention

// Sort sorts slice of MessageEntityMention.
func (s MessageEntityMentionArray) Sort(less func(a, b MessageEntityMention) bool) MessageEntityMentionArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityMention.
func (s MessageEntityMentionArray) SortStable(less func(a, b MessageEntityMention) bool) MessageEntityMentionArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityMention.
func (s MessageEntityMentionArray) Retain(keep func(x MessageEntityMention) bool) MessageEntityMentionArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityMentionArray) First() (v MessageEntityMention, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityMentionArray) Last() (v MessageEntityMention, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityMentionArray) PopFirst() (v MessageEntityMention, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityMention
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityMentionArray) Pop() (v MessageEntityMention, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityHashtagArray is adapter for slice of MessageEntityHashtag.
type MessageEntityHashtagArray []MessageEntityHashtag

// Sort sorts slice of MessageEntityHashtag.
func (s MessageEntityHashtagArray) Sort(less func(a, b MessageEntityHashtag) bool) MessageEntityHashtagArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityHashtag.
func (s MessageEntityHashtagArray) SortStable(less func(a, b MessageEntityHashtag) bool) MessageEntityHashtagArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityHashtag.
func (s MessageEntityHashtagArray) Retain(keep func(x MessageEntityHashtag) bool) MessageEntityHashtagArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityHashtagArray) First() (v MessageEntityHashtag, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityHashtagArray) Last() (v MessageEntityHashtag, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityHashtagArray) PopFirst() (v MessageEntityHashtag, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityHashtag
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityHashtagArray) Pop() (v MessageEntityHashtag, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityBotCommandArray is adapter for slice of MessageEntityBotCommand.
type MessageEntityBotCommandArray []MessageEntityBotCommand

// Sort sorts slice of MessageEntityBotCommand.
func (s MessageEntityBotCommandArray) Sort(less func(a, b MessageEntityBotCommand) bool) MessageEntityBotCommandArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityBotCommand.
func (s MessageEntityBotCommandArray) SortStable(less func(a, b MessageEntityBotCommand) bool) MessageEntityBotCommandArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityBotCommand.
func (s MessageEntityBotCommandArray) Retain(keep func(x MessageEntityBotCommand) bool) MessageEntityBotCommandArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityBotCommandArray) First() (v MessageEntityBotCommand, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityBotCommandArray) Last() (v MessageEntityBotCommand, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityBotCommandArray) PopFirst() (v MessageEntityBotCommand, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityBotCommand
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityBotCommandArray) Pop() (v MessageEntityBotCommand, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityURLArray is adapter for slice of MessageEntityURL.
type MessageEntityURLArray []MessageEntityURL

// Sort sorts slice of MessageEntityURL.
func (s MessageEntityURLArray) Sort(less func(a, b MessageEntityURL) bool) MessageEntityURLArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityURL.
func (s MessageEntityURLArray) SortStable(less func(a, b MessageEntityURL) bool) MessageEntityURLArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityURL.
func (s MessageEntityURLArray) Retain(keep func(x MessageEntityURL) bool) MessageEntityURLArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityURLArray) First() (v MessageEntityURL, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityURLArray) Last() (v MessageEntityURL, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityURLArray) PopFirst() (v MessageEntityURL, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityURL
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityURLArray) Pop() (v MessageEntityURL, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityEmailArray is adapter for slice of MessageEntityEmail.
type MessageEntityEmailArray []MessageEntityEmail

// Sort sorts slice of MessageEntityEmail.
func (s MessageEntityEmailArray) Sort(less func(a, b MessageEntityEmail) bool) MessageEntityEmailArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityEmail.
func (s MessageEntityEmailArray) SortStable(less func(a, b MessageEntityEmail) bool) MessageEntityEmailArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityEmail.
func (s MessageEntityEmailArray) Retain(keep func(x MessageEntityEmail) bool) MessageEntityEmailArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityEmailArray) First() (v MessageEntityEmail, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityEmailArray) Last() (v MessageEntityEmail, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityEmailArray) PopFirst() (v MessageEntityEmail, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityEmail
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityEmailArray) Pop() (v MessageEntityEmail, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityBoldArray is adapter for slice of MessageEntityBold.
type MessageEntityBoldArray []MessageEntityBold

// Sort sorts slice of MessageEntityBold.
func (s MessageEntityBoldArray) Sort(less func(a, b MessageEntityBold) bool) MessageEntityBoldArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityBold.
func (s MessageEntityBoldArray) SortStable(less func(a, b MessageEntityBold) bool) MessageEntityBoldArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityBold.
func (s MessageEntityBoldArray) Retain(keep func(x MessageEntityBold) bool) MessageEntityBoldArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityBoldArray) First() (v MessageEntityBold, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityBoldArray) Last() (v MessageEntityBold, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityBoldArray) PopFirst() (v MessageEntityBold, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityBold
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityBoldArray) Pop() (v MessageEntityBold, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityItalicArray is adapter for slice of MessageEntityItalic.
type MessageEntityItalicArray []MessageEntityItalic

// Sort sorts slice of MessageEntityItalic.
func (s MessageEntityItalicArray) Sort(less func(a, b MessageEntityItalic) bool) MessageEntityItalicArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityItalic.
func (s MessageEntityItalicArray) SortStable(less func(a, b MessageEntityItalic) bool) MessageEntityItalicArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityItalic.
func (s MessageEntityItalicArray) Retain(keep func(x MessageEntityItalic) bool) MessageEntityItalicArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityItalicArray) First() (v MessageEntityItalic, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityItalicArray) Last() (v MessageEntityItalic, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityItalicArray) PopFirst() (v MessageEntityItalic, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityItalic
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityItalicArray) Pop() (v MessageEntityItalic, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityCodeArray is adapter for slice of MessageEntityCode.
type MessageEntityCodeArray []MessageEntityCode

// Sort sorts slice of MessageEntityCode.
func (s MessageEntityCodeArray) Sort(less func(a, b MessageEntityCode) bool) MessageEntityCodeArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityCode.
func (s MessageEntityCodeArray) SortStable(less func(a, b MessageEntityCode) bool) MessageEntityCodeArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityCode.
func (s MessageEntityCodeArray) Retain(keep func(x MessageEntityCode) bool) MessageEntityCodeArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityCodeArray) First() (v MessageEntityCode, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityCodeArray) Last() (v MessageEntityCode, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityCodeArray) PopFirst() (v MessageEntityCode, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityCode
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityCodeArray) Pop() (v MessageEntityCode, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityPreArray is adapter for slice of MessageEntityPre.
type MessageEntityPreArray []MessageEntityPre

// Sort sorts slice of MessageEntityPre.
func (s MessageEntityPreArray) Sort(less func(a, b MessageEntityPre) bool) MessageEntityPreArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityPre.
func (s MessageEntityPreArray) SortStable(less func(a, b MessageEntityPre) bool) MessageEntityPreArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityPre.
func (s MessageEntityPreArray) Retain(keep func(x MessageEntityPre) bool) MessageEntityPreArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityPreArray) First() (v MessageEntityPre, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityPreArray) Last() (v MessageEntityPre, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityPreArray) PopFirst() (v MessageEntityPre, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityPre
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityPreArray) Pop() (v MessageEntityPre, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityTextURLArray is adapter for slice of MessageEntityTextURL.
type MessageEntityTextURLArray []MessageEntityTextURL

// Sort sorts slice of MessageEntityTextURL.
func (s MessageEntityTextURLArray) Sort(less func(a, b MessageEntityTextURL) bool) MessageEntityTextURLArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityTextURL.
func (s MessageEntityTextURLArray) SortStable(less func(a, b MessageEntityTextURL) bool) MessageEntityTextURLArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityTextURL.
func (s MessageEntityTextURLArray) Retain(keep func(x MessageEntityTextURL) bool) MessageEntityTextURLArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityTextURLArray) First() (v MessageEntityTextURL, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityTextURLArray) Last() (v MessageEntityTextURL, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityTextURLArray) PopFirst() (v MessageEntityTextURL, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityTextURL
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityTextURLArray) Pop() (v MessageEntityTextURL, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityMentionNameArray is adapter for slice of MessageEntityMentionName.
type MessageEntityMentionNameArray []MessageEntityMentionName

// Sort sorts slice of MessageEntityMentionName.
func (s MessageEntityMentionNameArray) Sort(less func(a, b MessageEntityMentionName) bool) MessageEntityMentionNameArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityMentionName.
func (s MessageEntityMentionNameArray) SortStable(less func(a, b MessageEntityMentionName) bool) MessageEntityMentionNameArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityMentionName.
func (s MessageEntityMentionNameArray) Retain(keep func(x MessageEntityMentionName) bool) MessageEntityMentionNameArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityMentionNameArray) First() (v MessageEntityMentionName, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityMentionNameArray) Last() (v MessageEntityMentionName, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityMentionNameArray) PopFirst() (v MessageEntityMentionName, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityMentionName
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityMentionNameArray) Pop() (v MessageEntityMentionName, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// InputMessageEntityMentionNameArray is adapter for slice of InputMessageEntityMentionName.
type InputMessageEntityMentionNameArray []InputMessageEntityMentionName

// Sort sorts slice of InputMessageEntityMentionName.
func (s InputMessageEntityMentionNameArray) Sort(less func(a, b InputMessageEntityMentionName) bool) InputMessageEntityMentionNameArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputMessageEntityMentionName.
func (s InputMessageEntityMentionNameArray) SortStable(less func(a, b InputMessageEntityMentionName) bool) InputMessageEntityMentionNameArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputMessageEntityMentionName.
func (s InputMessageEntityMentionNameArray) Retain(keep func(x InputMessageEntityMentionName) bool) InputMessageEntityMentionNameArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputMessageEntityMentionNameArray) First() (v InputMessageEntityMentionName, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputMessageEntityMentionNameArray) Last() (v InputMessageEntityMentionName, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputMessageEntityMentionNameArray) PopFirst() (v InputMessageEntityMentionName, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputMessageEntityMentionName
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputMessageEntityMentionNameArray) Pop() (v InputMessageEntityMentionName, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityPhoneArray is adapter for slice of MessageEntityPhone.
type MessageEntityPhoneArray []MessageEntityPhone

// Sort sorts slice of MessageEntityPhone.
func (s MessageEntityPhoneArray) Sort(less func(a, b MessageEntityPhone) bool) MessageEntityPhoneArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityPhone.
func (s MessageEntityPhoneArray) SortStable(less func(a, b MessageEntityPhone) bool) MessageEntityPhoneArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityPhone.
func (s MessageEntityPhoneArray) Retain(keep func(x MessageEntityPhone) bool) MessageEntityPhoneArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityPhoneArray) First() (v MessageEntityPhone, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityPhoneArray) Last() (v MessageEntityPhone, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityPhoneArray) PopFirst() (v MessageEntityPhone, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityPhone
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityPhoneArray) Pop() (v MessageEntityPhone, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityCashtagArray is adapter for slice of MessageEntityCashtag.
type MessageEntityCashtagArray []MessageEntityCashtag

// Sort sorts slice of MessageEntityCashtag.
func (s MessageEntityCashtagArray) Sort(less func(a, b MessageEntityCashtag) bool) MessageEntityCashtagArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityCashtag.
func (s MessageEntityCashtagArray) SortStable(less func(a, b MessageEntityCashtag) bool) MessageEntityCashtagArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityCashtag.
func (s MessageEntityCashtagArray) Retain(keep func(x MessageEntityCashtag) bool) MessageEntityCashtagArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityCashtagArray) First() (v MessageEntityCashtag, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityCashtagArray) Last() (v MessageEntityCashtag, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityCashtagArray) PopFirst() (v MessageEntityCashtag, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityCashtag
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityCashtagArray) Pop() (v MessageEntityCashtag, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityUnderlineArray is adapter for slice of MessageEntityUnderline.
type MessageEntityUnderlineArray []MessageEntityUnderline

// Sort sorts slice of MessageEntityUnderline.
func (s MessageEntityUnderlineArray) Sort(less func(a, b MessageEntityUnderline) bool) MessageEntityUnderlineArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityUnderline.
func (s MessageEntityUnderlineArray) SortStable(less func(a, b MessageEntityUnderline) bool) MessageEntityUnderlineArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityUnderline.
func (s MessageEntityUnderlineArray) Retain(keep func(x MessageEntityUnderline) bool) MessageEntityUnderlineArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityUnderlineArray) First() (v MessageEntityUnderline, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityUnderlineArray) Last() (v MessageEntityUnderline, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityUnderlineArray) PopFirst() (v MessageEntityUnderline, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityUnderline
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityUnderlineArray) Pop() (v MessageEntityUnderline, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityStrikeArray is adapter for slice of MessageEntityStrike.
type MessageEntityStrikeArray []MessageEntityStrike

// Sort sorts slice of MessageEntityStrike.
func (s MessageEntityStrikeArray) Sort(less func(a, b MessageEntityStrike) bool) MessageEntityStrikeArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityStrike.
func (s MessageEntityStrikeArray) SortStable(less func(a, b MessageEntityStrike) bool) MessageEntityStrikeArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityStrike.
func (s MessageEntityStrikeArray) Retain(keep func(x MessageEntityStrike) bool) MessageEntityStrikeArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityStrikeArray) First() (v MessageEntityStrike, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityStrikeArray) Last() (v MessageEntityStrike, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityStrikeArray) PopFirst() (v MessageEntityStrike, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityStrike
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityStrikeArray) Pop() (v MessageEntityStrike, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityBlockquoteArray is adapter for slice of MessageEntityBlockquote.
type MessageEntityBlockquoteArray []MessageEntityBlockquote

// Sort sorts slice of MessageEntityBlockquote.
func (s MessageEntityBlockquoteArray) Sort(less func(a, b MessageEntityBlockquote) bool) MessageEntityBlockquoteArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityBlockquote.
func (s MessageEntityBlockquoteArray) SortStable(less func(a, b MessageEntityBlockquote) bool) MessageEntityBlockquoteArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityBlockquote.
func (s MessageEntityBlockquoteArray) Retain(keep func(x MessageEntityBlockquote) bool) MessageEntityBlockquoteArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityBlockquoteArray) First() (v MessageEntityBlockquote, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityBlockquoteArray) Last() (v MessageEntityBlockquote, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityBlockquoteArray) PopFirst() (v MessageEntityBlockquote, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityBlockquote
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityBlockquoteArray) Pop() (v MessageEntityBlockquote, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessageEntityBankCardArray is adapter for slice of MessageEntityBankCard.
type MessageEntityBankCardArray []MessageEntityBankCard

// Sort sorts slice of MessageEntityBankCard.
func (s MessageEntityBankCardArray) Sort(less func(a, b MessageEntityBankCard) bool) MessageEntityBankCardArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessageEntityBankCard.
func (s MessageEntityBankCardArray) SortStable(less func(a, b MessageEntityBankCard) bool) MessageEntityBankCardArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessageEntityBankCard.
func (s MessageEntityBankCardArray) Retain(keep func(x MessageEntityBankCard) bool) MessageEntityBankCardArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessageEntityBankCardArray) First() (v MessageEntityBankCard, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessageEntityBankCardArray) Last() (v MessageEntityBankCard, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessageEntityBankCardArray) PopFirst() (v MessageEntityBankCard, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessageEntityBankCard
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessageEntityBankCardArray) Pop() (v MessageEntityBankCard, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
