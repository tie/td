// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// ChannelsEditBannedRequest represents TL type `channels.editBanned#72796912`.
// Ban/unban/kick a user in a supergroup/channel¹.
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// See https://core.telegram.org/method/channels.editBanned for reference.
type ChannelsEditBannedRequest struct {
	// The supergroup/channel¹.
	//
	// Links:
	//  1) https://core.telegram.org/api/channel
	Channel InputChannelClass
	// The ID of the user whose banned rights should be modified
	UserID InputUserClass
	// The banned rights
	BannedRights ChatBannedRights
}

// ChannelsEditBannedRequestTypeID is TL type id of ChannelsEditBannedRequest.
const ChannelsEditBannedRequestTypeID = 0x72796912

func (e *ChannelsEditBannedRequest) Zero() bool {
	if e == nil {
		return true
	}
	if !(e.Channel == nil) {
		return false
	}
	if !(e.UserID == nil) {
		return false
	}
	if !(e.BannedRights.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (e *ChannelsEditBannedRequest) String() string {
	if e == nil {
		return "ChannelsEditBannedRequest(nil)"
	}
	type Alias ChannelsEditBannedRequest
	return fmt.Sprintf("ChannelsEditBannedRequest%+v", Alias(*e))
}

// FillFrom fills ChannelsEditBannedRequest from given interface.
func (e *ChannelsEditBannedRequest) FillFrom(from interface {
	GetChannel() (value InputChannelClass)
	GetUserID() (value InputUserClass)
	GetBannedRights() (value ChatBannedRights)
}) {
	e.Channel = from.GetChannel()
	e.UserID = from.GetUserID()
	e.BannedRights = from.GetBannedRights()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelsEditBannedRequest) TypeID() uint32 {
	return ChannelsEditBannedRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelsEditBannedRequest) TypeName() string {
	return "channels.editBanned"
}

// TypeInfo returns info about TL type.
func (e *ChannelsEditBannedRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channels.editBanned",
		ID:   ChannelsEditBannedRequestTypeID,
	}
	if e == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Channel",
			SchemaName: "channel",
		},
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "BannedRights",
			SchemaName: "banned_rights",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (e *ChannelsEditBannedRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode channels.editBanned#72796912 as nil")
	}
	b.PutID(ChannelsEditBannedRequestTypeID)
	return e.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (e *ChannelsEditBannedRequest) EncodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode channels.editBanned#72796912 as nil")
	}
	if e.Channel == nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field channel is nil")
	}
	if err := e.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field channel: %w", err)
	}
	if e.UserID == nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field user_id is nil")
	}
	if err := e.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field user_id: %w", err)
	}
	if err := e.BannedRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field banned_rights: %w", err)
	}
	return nil
}

// GetChannel returns value of Channel field.
func (e *ChannelsEditBannedRequest) GetChannel() (value InputChannelClass) {
	return e.Channel
}

// GetChannelAsNotEmpty returns mapped value of Channel field.
func (e *ChannelsEditBannedRequest) GetChannelAsNotEmpty() (NotEmptyInputChannel, bool) {
	return e.Channel.AsNotEmpty()
}

// GetUserID returns value of UserID field.
func (e *ChannelsEditBannedRequest) GetUserID() (value InputUserClass) {
	return e.UserID
}

// GetBannedRights returns value of BannedRights field.
func (e *ChannelsEditBannedRequest) GetBannedRights() (value ChatBannedRights) {
	return e.BannedRights
}

// Decode implements bin.Decoder.
func (e *ChannelsEditBannedRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode channels.editBanned#72796912 to nil")
	}
	if err := b.ConsumeID(ChannelsEditBannedRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.editBanned#72796912: %w", err)
	}
	return e.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (e *ChannelsEditBannedRequest) DecodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode channels.editBanned#72796912 to nil")
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.editBanned#72796912: field channel: %w", err)
		}
		e.Channel = value
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.editBanned#72796912: field user_id: %w", err)
		}
		e.UserID = value
	}
	{
		if err := e.BannedRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channels.editBanned#72796912: field banned_rights: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for ChannelsEditBannedRequest.
var (
	_ bin.Encoder     = &ChannelsEditBannedRequest{}
	_ bin.Decoder     = &ChannelsEditBannedRequest{}
	_ bin.BareEncoder = &ChannelsEditBannedRequest{}
	_ bin.BareDecoder = &ChannelsEditBannedRequest{}
)

// ChannelsEditBanned invokes method channels.editBanned#72796912 returning error if any.
// Ban/unban/kick a user in a supergroup/channel¹.
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 PINNED_DIALOGS_TOO_MUCH: Too many pinned dialogs
//  400 USER_ADMIN_INVALID: You're not an admin
//  400 USER_ID_INVALID: The provided user ID is invalid
//
// See https://core.telegram.org/method/channels.editBanned for reference.
// Can be used by bots.
func ChannelsEditBanned(ctx context.Context, rpc Invoker, request *ChannelsEditBannedRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
