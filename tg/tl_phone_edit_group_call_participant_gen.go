// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// PhoneEditGroupCallParticipantRequest represents TL type `phone.editGroupCallParticipant#d975eb80`.
//
// See https://core.telegram.org/method/phone.editGroupCallParticipant for reference.
type PhoneEditGroupCallParticipantRequest struct {
	// Flags field of PhoneEditGroupCallParticipantRequest.
	Flags bin.Fields
	// Muted field of PhoneEditGroupCallParticipantRequest.
	Muted bool
	// Call field of PhoneEditGroupCallParticipantRequest.
	Call InputGroupCall
	// Participant field of PhoneEditGroupCallParticipantRequest.
	Participant InputPeerClass
	// Volume field of PhoneEditGroupCallParticipantRequest.
	//
	// Use SetVolume and GetVolume helpers.
	Volume int
	// RaiseHand field of PhoneEditGroupCallParticipantRequest.
	//
	// Use SetRaiseHand and GetRaiseHand helpers.
	RaiseHand bool
}

// PhoneEditGroupCallParticipantRequestTypeID is TL type id of PhoneEditGroupCallParticipantRequest.
const PhoneEditGroupCallParticipantRequestTypeID = 0xd975eb80

func (e *PhoneEditGroupCallParticipantRequest) Zero() bool {
	if e == nil {
		return true
	}
	if !(e.Flags.Zero()) {
		return false
	}
	if !(e.Muted == false) {
		return false
	}
	if !(e.Call.Zero()) {
		return false
	}
	if !(e.Participant == nil) {
		return false
	}
	if !(e.Volume == 0) {
		return false
	}
	if !(e.RaiseHand == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (e *PhoneEditGroupCallParticipantRequest) String() string {
	if e == nil {
		return "PhoneEditGroupCallParticipantRequest(nil)"
	}
	type Alias PhoneEditGroupCallParticipantRequest
	return fmt.Sprintf("PhoneEditGroupCallParticipantRequest%+v", Alias(*e))
}

// FillFrom fills PhoneEditGroupCallParticipantRequest from given interface.
func (e *PhoneEditGroupCallParticipantRequest) FillFrom(from interface {
	GetMuted() (value bool)
	GetCall() (value InputGroupCall)
	GetParticipant() (value InputPeerClass)
	GetVolume() (value int, ok bool)
	GetRaiseHand() (value bool, ok bool)
}) {
	e.Muted = from.GetMuted()
	e.Call = from.GetCall()
	e.Participant = from.GetParticipant()
	if val, ok := from.GetVolume(); ok {
		e.Volume = val
	}

	if val, ok := from.GetRaiseHand(); ok {
		e.RaiseHand = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PhoneEditGroupCallParticipantRequest) TypeID() uint32 {
	return PhoneEditGroupCallParticipantRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*PhoneEditGroupCallParticipantRequest) TypeName() string {
	return "phone.editGroupCallParticipant"
}

// TypeInfo returns info about TL type.
func (e *PhoneEditGroupCallParticipantRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "phone.editGroupCallParticipant",
		ID:   PhoneEditGroupCallParticipantRequestTypeID,
	}
	if e == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Muted",
			SchemaName: "muted",
			Null:       !e.Flags.Has(0),
		},
		{
			Name:       "Call",
			SchemaName: "call",
		},
		{
			Name:       "Participant",
			SchemaName: "participant",
		},
		{
			Name:       "Volume",
			SchemaName: "volume",
			Null:       !e.Flags.Has(1),
		},
		{
			Name:       "RaiseHand",
			SchemaName: "raise_hand",
			Null:       !e.Flags.Has(2),
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (e *PhoneEditGroupCallParticipantRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode phone.editGroupCallParticipant#d975eb80 as nil")
	}
	b.PutID(PhoneEditGroupCallParticipantRequestTypeID)
	return e.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (e *PhoneEditGroupCallParticipantRequest) EncodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode phone.editGroupCallParticipant#d975eb80 as nil")
	}
	if !(e.Muted == false) {
		e.Flags.Set(0)
	}
	if !(e.Volume == 0) {
		e.Flags.Set(1)
	}
	if !(e.RaiseHand == false) {
		e.Flags.Set(2)
	}
	if err := e.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.editGroupCallParticipant#d975eb80: field flags: %w", err)
	}
	if err := e.Call.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.editGroupCallParticipant#d975eb80: field call: %w", err)
	}
	if e.Participant == nil {
		return fmt.Errorf("unable to encode phone.editGroupCallParticipant#d975eb80: field participant is nil")
	}
	if err := e.Participant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.editGroupCallParticipant#d975eb80: field participant: %w", err)
	}
	if e.Flags.Has(1) {
		b.PutInt(e.Volume)
	}
	if e.Flags.Has(2) {
		b.PutBool(e.RaiseHand)
	}
	return nil
}

// SetMuted sets value of Muted conditional field.
func (e *PhoneEditGroupCallParticipantRequest) SetMuted(value bool) {
	if value {
		e.Flags.Set(0)
		e.Muted = true
	} else {
		e.Flags.Unset(0)
		e.Muted = false
	}
}

// GetMuted returns value of Muted conditional field.
func (e *PhoneEditGroupCallParticipantRequest) GetMuted() (value bool) {
	return e.Flags.Has(0)
}

// GetCall returns value of Call field.
func (e *PhoneEditGroupCallParticipantRequest) GetCall() (value InputGroupCall) {
	return e.Call
}

// GetParticipant returns value of Participant field.
func (e *PhoneEditGroupCallParticipantRequest) GetParticipant() (value InputPeerClass) {
	return e.Participant
}

// SetVolume sets value of Volume conditional field.
func (e *PhoneEditGroupCallParticipantRequest) SetVolume(value int) {
	e.Flags.Set(1)
	e.Volume = value
}

// GetVolume returns value of Volume conditional field and
// boolean which is true if field was set.
func (e *PhoneEditGroupCallParticipantRequest) GetVolume() (value int, ok bool) {
	if !e.Flags.Has(1) {
		return value, false
	}
	return e.Volume, true
}

// SetRaiseHand sets value of RaiseHand conditional field.
func (e *PhoneEditGroupCallParticipantRequest) SetRaiseHand(value bool) {
	e.Flags.Set(2)
	e.RaiseHand = value
}

// GetRaiseHand returns value of RaiseHand conditional field and
// boolean which is true if field was set.
func (e *PhoneEditGroupCallParticipantRequest) GetRaiseHand() (value bool, ok bool) {
	if !e.Flags.Has(2) {
		return value, false
	}
	return e.RaiseHand, true
}

// Decode implements bin.Decoder.
func (e *PhoneEditGroupCallParticipantRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode phone.editGroupCallParticipant#d975eb80 to nil")
	}
	if err := b.ConsumeID(PhoneEditGroupCallParticipantRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode phone.editGroupCallParticipant#d975eb80: %w", err)
	}
	return e.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (e *PhoneEditGroupCallParticipantRequest) DecodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode phone.editGroupCallParticipant#d975eb80 to nil")
	}
	{
		if err := e.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode phone.editGroupCallParticipant#d975eb80: field flags: %w", err)
		}
	}
	e.Muted = e.Flags.Has(0)
	{
		if err := e.Call.Decode(b); err != nil {
			return fmt.Errorf("unable to decode phone.editGroupCallParticipant#d975eb80: field call: %w", err)
		}
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode phone.editGroupCallParticipant#d975eb80: field participant: %w", err)
		}
		e.Participant = value
	}
	if e.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode phone.editGroupCallParticipant#d975eb80: field volume: %w", err)
		}
		e.Volume = value
	}
	if e.Flags.Has(2) {
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode phone.editGroupCallParticipant#d975eb80: field raise_hand: %w", err)
		}
		e.RaiseHand = value
	}
	return nil
}

// Ensuring interfaces in compile-time for PhoneEditGroupCallParticipantRequest.
var (
	_ bin.Encoder     = &PhoneEditGroupCallParticipantRequest{}
	_ bin.Decoder     = &PhoneEditGroupCallParticipantRequest{}
	_ bin.BareEncoder = &PhoneEditGroupCallParticipantRequest{}
	_ bin.BareDecoder = &PhoneEditGroupCallParticipantRequest{}
)

// PhoneEditGroupCallParticipant invokes method phone.editGroupCallParticipant#d975eb80 returning error if any.
//
// See https://core.telegram.org/method/phone.editGroupCallParticipant for reference.
func PhoneEditGroupCallParticipant(ctx context.Context, rpc Invoker, request *PhoneEditGroupCallParticipantRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
