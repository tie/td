// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// ChatTheme represents TL type `chatTheme#ed0b5c33`.
//
// See https://core.telegram.org/constructor/chatTheme for reference.
type ChatTheme struct {
	// Emoticon field of ChatTheme.
	Emoticon string
	// Theme field of ChatTheme.
	Theme Theme
	// DarkTheme field of ChatTheme.
	DarkTheme Theme
}

// ChatThemeTypeID is TL type id of ChatTheme.
const ChatThemeTypeID = 0xed0b5c33

func (c *ChatTheme) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Emoticon == "") {
		return false
	}
	if !(c.Theme.Zero()) {
		return false
	}
	if !(c.DarkTheme.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatTheme) String() string {
	if c == nil {
		return "ChatTheme(nil)"
	}
	type Alias ChatTheme
	return fmt.Sprintf("ChatTheme%+v", Alias(*c))
}

// FillFrom fills ChatTheme from given interface.
func (c *ChatTheme) FillFrom(from interface {
	GetEmoticon() (value string)
	GetTheme() (value Theme)
	GetDarkTheme() (value Theme)
}) {
	c.Emoticon = from.GetEmoticon()
	c.Theme = from.GetTheme()
	c.DarkTheme = from.GetDarkTheme()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatTheme) TypeID() uint32 {
	return ChatThemeTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatTheme) TypeName() string {
	return "chatTheme"
}

// TypeInfo returns info about TL type.
func (c *ChatTheme) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatTheme",
		ID:   ChatThemeTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Emoticon",
			SchemaName: "emoticon",
		},
		{
			Name:       "Theme",
			SchemaName: "theme",
		},
		{
			Name:       "DarkTheme",
			SchemaName: "dark_theme",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatTheme) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatTheme#ed0b5c33 as nil")
	}
	b.PutID(ChatThemeTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatTheme) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatTheme#ed0b5c33 as nil")
	}
	b.PutString(c.Emoticon)
	if err := c.Theme.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chatTheme#ed0b5c33: field theme: %w", err)
	}
	if err := c.DarkTheme.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chatTheme#ed0b5c33: field dark_theme: %w", err)
	}
	return nil
}

// GetEmoticon returns value of Emoticon field.
func (c *ChatTheme) GetEmoticon() (value string) {
	return c.Emoticon
}

// GetTheme returns value of Theme field.
func (c *ChatTheme) GetTheme() (value Theme) {
	return c.Theme
}

// GetDarkTheme returns value of DarkTheme field.
func (c *ChatTheme) GetDarkTheme() (value Theme) {
	return c.DarkTheme
}

// Decode implements bin.Decoder.
func (c *ChatTheme) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatTheme#ed0b5c33 to nil")
	}
	if err := b.ConsumeID(ChatThemeTypeID); err != nil {
		return fmt.Errorf("unable to decode chatTheme#ed0b5c33: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatTheme) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatTheme#ed0b5c33 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode chatTheme#ed0b5c33: field emoticon: %w", err)
		}
		c.Emoticon = value
	}
	{
		if err := c.Theme.Decode(b); err != nil {
			return fmt.Errorf("unable to decode chatTheme#ed0b5c33: field theme: %w", err)
		}
	}
	{
		if err := c.DarkTheme.Decode(b); err != nil {
			return fmt.Errorf("unable to decode chatTheme#ed0b5c33: field dark_theme: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for ChatTheme.
var (
	_ bin.Encoder     = &ChatTheme{}
	_ bin.Decoder     = &ChatTheme{}
	_ bin.BareEncoder = &ChatTheme{}
	_ bin.BareDecoder = &ChatTheme{}
)
